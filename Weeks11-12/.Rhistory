bbal
head(bball)
row.names(bball)
# set row names to player name
row.names(bball) <- bball$Name
row.names(bball)
head(bball)
bball <- bball[,2:20]
head(bball)
# Store data as a matrix for heatmap
bball_matrix <- data.matrix(bball)
head(bball_matrix)
# Make a heatmap
bball_heatmap <- heatmap(bball_matrix, Rowv = NA, Colv = NA,
col = cm.colors(256), scale = 'column',
margins = c(5,10))
# Pick a different color scheme
bball_heatmap <- heatmap(bball_matrix, Rowv = NA, Colv = NA,
col = heat.colors(256),  # sets colors to red / yellow
scale = 'column', margins = c(5,10))
cm.colors(10)
# Set your own color scheme
red_colors <- c('#ffd3cd', '#ffc4bc', '#ffb5ab', '#ffa69a', '#ff9789',
'#ff8978', '#ff7a67', '#ff6b56', '#ff5c45', '#ff4d34')
bball_heatmap <- heatmap(bball_matrix, Rowv = NA, Colv = NA,
col = red_colors,  # sets colors to assigned colors
scale = 'column', margins = c(5,10))
# Set your own color scheme
red_colors <- c('#ffd3cd', '#ffc4bc', '#ffb5ab', '#ffa69a', '#ff9789',
'#ff8978', '#ff7a67', '2E4BB1', '#ff6b56', '#ff5c45', '#ff4d34')
bball_heatmap <- heatmap(bball_matrix, Rowv = NA, Colv = NA,
col = red_colors,  # sets colors to assigned colors
scale = 'column', margins = c(5,10))
# Set your own color scheme
red_colors <- c('#ffd3cd', '#ffc4bc', '#ffb5ab', '#ffa69a', '#ff9789',
'#ff8978', '#ff7a67', '#2E4BB1', '#ff6b56', '#ff5c45', '#ff4d34')
bball_heatmap <- heatmap(bball_matrix, Rowv = NA, Colv = NA,
col = red_colors,  # sets colors to assigned colors
scale = 'column', margins = c(5,10))
# Set your own color scheme
red_colors <- c('#ffd3cd', '#ffc4bc', '#ffb5ab', '#ffa69a', '#ff9789',
'#ff8978', '#ff7a67', '#ff6b56', '#ff5c45', '#ff4d34')
bball_heatmap <- heatmap(bball_matrix, Rowv = NA, Colv = NA,
col = red_colors,  # sets colors to assigned colors
scale = 'column', margins = c(5,10))
?cm.colors
bball_heatmap <- heatmap(bball_matrix, Rowv = NA, Colv = NA,
col = rainbow,  # sets colors to assigned colors
scale = 'column', margins = c(5,10))
red_colors
# Set your own color scheme
red_colors <- c('#ffd3cd', '#ffc4bc', '#ffb5ab', '#ffa69a', '#ff9789',
'#ff8978', '#ff7a67', '#ff6b56', '#ff5c45', '#ff4d34')
bball_heatmap <- heatmap(bball_matrix, Rowv = NA, Colv = NA,
col = red_colors,  # sets colors to assigned colors
scale = 'column', margins = c(5,10))
?brewer.pal
??brewer.pal
library(RColorBrewer)
?brewer.pal
# Create a heatmap using ColorBrewer
bball_heatmap <- heatmap(bball_matrix, Rowv = NA, Colv = NA,
col = brewer.pal(9, "Blues"),  # 9 shades of blue
scale = 'column', margins = c(5,10))
# Load library
library(aplpack)
# Load library
install.packages('aplpack')
library(aplpack)
# Load data set
bball <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", header = TRUE)
# Make some Chernoff faces
faces(bball[,2:16], ncolors = 0)
# Make some Chernoff faces
faces(bball[,2:16], ncolors = 5)
# Make some Chernoff faces
faces(bball[,2:16], ncolors = 100)
# Make some Chernoff faces
faces(bball[,2:16], ncolors = 256)
# Make some Chernoff faces
faces(bball[,2:16], ncolors = 0)
# Put names to faces
faces(bball[,2:16], labels = bball$Name)
# Put names to faces
faces(bball[,2:16], ncolors = 0, labels = bball$Name)
# Put names to faces
faces(bball[,2:16], ncolors = 0, labels = bball$Name)
?faces
faces(bball[,2:16], ncolors = 0, labels = bball$Name, face.type = 2)
faces(bball[,2:16], ncolors = 0, labels = bball$Name, face.type = 1)
faces(bball[,2:16], ncolors = 0, labels = bball$Name, print.info = TRUE)
faces(bball[,2:16], ncolors = 0, labels = bball$Name, cex = 8)
faces(bball[,2:16], ncolors = 0, labels = bball$Name, cex = 0.8)
faces(bball[,2:16], ncolors = 0, labels = bball$Name, cex = 1)
# Load data
crime <-
read.csv('http://datasets.flowingdata.com/crimeRatesByState-formatted.csv')
head(crime)
# Create star charts
star(crime)
# Create star charts
stars(crime)
# Set row names to state names
row.names(crime) <- crime$state
crime <- crime[,2:7]
# Star charts
stars(crime, flip.labels = FALSE, key.loc = c(15, 1.5))
# Create star charts
stars(crime)
# Star charts
stars(crime, flip.labels = FALSE, key.loc = c(15, 1.5))
# Align labels and add a key
stars(crime, flip.labels = FALSE, key.loc = c(15, 1.5))
# Variations
# Resturct all data to the top half of the circle
stars(crime, flip.labels = FALSE, key.loc = c(15, 1.5), full = FALSE)
# Nightingale charts
stars(crime, flip.labels = FALSE, key.loc = c(15, 1.5), draw.segments = FALSE)
# Nightingale charts
stars(crime, flip.labels = FALSE, key.loc = c(15, 1.5), draw.segments = TRUE)
# Load data
url <- "http://datasets.flowingdata.com/education.csv"
education <- read.csv(url, header = TRUE)
education[1:10,]
# Load library
library(lattice)
# Create parallel coordinates plot
parallel(education)
# Create parallel coordinates plot
parallelplot(education)
# Flip on axis
parallelplot(education, horizontal.axis=FALSE)
# Remove state column & change colors to black
parallelplot(education[,2:7], horizontal.axis=FALSE, col = '#000000')
summary(education)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#cccccc'
}
reading_colors <- c(reading_colors, col)
}
head(education)
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#737373'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#525252'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#525252'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#737373'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#969696'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#bdbdbd'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#cccccc'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#bdbdbd'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#bdbdbd'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#767676'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#bdbdbd'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
for (i in 1:length(education$state)) {
if(education$dropout_rate[i] > 5.3) {
col <- '#000000'
} else {
col <- '#bdbdbd'
}
dropout_colors <- c(dropout_colors, col)
}
# set colors based on dropout rates
dropout_colors <- c()
for (i in 1:length(education$state)) {
if(education$dropout_rate[i] > 5.3) {
col <- '#000000'
} else {
col <- '#bdbdbd'
}
dropout_colors <- c(dropout_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = dropout_colors)
# Load data
url <- "http://datasets.flowingdata.com/education.csv"
education <- read.csv(url, header = TRUE)
# Figure out how far each state should be from each other
ed.dis <- dist(education[,2:7])
ed.dis
# get x-y coordinates for each state
ed.mds <- cmdscale(ed.dis)
ed.mds
# store these values in x and y variables
x <- ed.mds[,1]
y <- ed.mds[,2]
plot(x, y)
# add labels
plot(x, y, type='n')
text(x, y, labels = education$state)
plot(x, y, type='n')
text(x, y, labels = education$state, col = reading_colors)
plot(x, y, type='n')
text(x, y, labels = education$state, col = dropout_colors)
## Model-based clustering
library(mclust)
ed.mclust <- Mclust(ed.mds)
# plot
plot(ed.mclust, data = ed.mds)
# plot
plot(ed.mclust, data = ed.mds)
# plot
plot(ed.mclust, data = ed.mds)
# plot
plot(ed.mclust, data = ed.mds)
# get x-y coordinates for each state
ed.mds <- cmdscale(ed.dis)
# fit
ed.mclust <- Mclust(ed.mds)
# plot
plot(ed.mclust, data = ed.mds)
# fit
ed.mclust <- Mclust(ed.mds)
# plot
plot(ed.mclust, data = ed.mds)
summary(educadf)
mean(educadf$Reading)
educadf[educadf['State'] == 'Nebraska']
b_colors <- c("#4f3674", "#8867b8", "#9d82c5")
names(b_colors) <- c('Ok', 'Good', 'Excellent')
ggplot() +
geom_bar(educadf, aes(x = State, y = Reading, fill = Reading), stat = 'identity', position = 'stack')
ggplot() +
geom_bar(data = head(educadf),
aes(x = State, y = Reading),
fill = 'black', width = 0.2, stat = 'identity')
names(educadf)
head(educadf, 10)
library(ggplot2)
fake.data <- data.frame(measure=letters[1:10],
value=rpois(10,5),
mean=rpois(10,5),
target=rpois(10,7) )
head(fake.data)
p <- ggplot(fake.data, aes(measure, value) )
p <- p + geom_col(fill="grey", width=0.5)
p <- p + geom_col(aes(measure, mean), width=0.2)
p <- p + geom_point(aes(measure, target), colour="red")
p <- p + geom_errorbar(aes(y = target,x = measure, ymin = target,ymax
= target), width = .45)
p <- p + coord_flip()
p
# Set Working Directory
setwd("C:/Users/micha/OneDrive/Documents/GitHub/DSC640/Weeks11-12/")
eduSummary <- read.csv("education_summary.csv")
head(eduSummary)
ggplot(eduSummary, aes(Category, Actual)) +
geom_col(fill="gray", width = 0.5)
ggplot(eduSummary, aes(Category, Actual)) +
geom_col(fill="gray", width = 0.5) +
geom_col(aes(Category, Average), width = 0.2)
names(eduSummary)
names(eduSummary)[names(eduSummary) == 'ï..Category']
names(eduSummary)[1]
names(eduSummary)[1] <- 'Category'
names(eduSummary)
head(eduSummary)
ggplot(eduSummary, aes(Category, Actual)) +
geom_col(fill="gray", width = 0.5) #+
ggplot(eduSummary, aes(Category, Actual)) +
geom_col(fill="gray", width = 0.5) +
geom_col(aes(Category, Average), width = 0.2)
head(fake.data)
head(eduSummary)
ggplot(eduSummary, aes(Category, Average)) +
geom_col(fill="gray", width = 0.5) +
geom_col(aes(Category, Actual), width = 0.2) +
geom_errorbar(aes(y = Excellent, x = Category,
ymin = Excellent, ymax = Excellent), width = 0.45)
ggplot(eduSummary, aes(Category, Average)) +
geom_col(fill="gray", width = 0.5) +
geom_col(aes(Category, Actual), width = 0.2) +
geom_errorbar(aes(y = Excellent, x = Category,
ymin = Excellent, ymax = Excellent),
width = 0.45) +
coord_flip()
ggplot(eduSummary, aes(Category, Average)) +
geom_col(fill="gray", width = 0.5) +
geom_col(aes(Category, Actual), width = 0.2) +
geom_errorbar(aes(y = Good, x = Category,
ymin = Good, ymax = Good),
width = 0.45) +
coord_flip()
ggplot(eduSummary, aes(Category, Max)) +
geom_col(fill="gray", width = 0.5) +
geom_col(aes(Category, Actual), width = 0.2) +
geom_errorbar(aes(y = Average, x = Category,
ymin = Average, ymax = Average),
width = 0.45) +
coord_flip()
ggplot(eduSummary, aes(Category, Average)) +
geom_col(fill="gray", width = 0.5) +
geom_col(aes(Category, Actual), width = 0.2) +
geom_errorbar(aes(y = Max, x = Category,
ymin = Max, ymax = Max),
width = 0.45) +
coord_flip() +
names(eduSummary)
ggplot(eduSummary, aes(Category, Average)) +
geom_col(fill="gray", width = 0.5) +
geom_col(aes(Category, Actual), width = 0.2) +
geom_errorbar(aes(y = Max, x = Category,
ymin = Max, ymax = Max),
width = 0.45) +
coord_flip()
Subject
ggplot(eduSummary, aes(Category, Average)) +
geom_col(fill="gray", width = 0.5) +
geom_col(aes(Category, Actual), width = 0.2) +
geom_errorbar(aes(y = Max, x = Category,
ymin = Max, ymax = Max),
width = 0.45) +
coord_flip() +
ggtitle('Nebraska SAT Scores Compared to US Average and Max Score') +
labs(x="Subject", y="SAT Score")
# Set color to Bellevue purple
color = "#4f3674"
ggplot(eduSummary, aes(Category, Average)) +
geom_col(fill="gray", width = 0.5) +
geom_col(fill=color, aes(Category, Actual), width = 0.2) +
geom_errorbar(aes(y = Max, x = Category,
ymin = Max, ymax = Max),
width = 0.45) +
coord_flip() +
ggtitle('Nebraska SAT Scores Compared to US Average and Max Score') +
labs(x="Subject", y="SAT Score")
ggplot(eduSummary, aes(Category, Average)) +
geom_col(fill="#7651ae", width = 0.5) +
geom_col(fill=color, aes(Category, Actual), width = 0.2) +
geom_errorbar(aes(y = Max, x = Category,
ymin = Max, ymax = Max),
width = 0.45) +
coord_flip() +
ggtitle('Nebraska SAT Scores Compared to US Average and Max Score') +
labs(x="Subject", y="SAT Score")
ggplot(eduSummary, aes(Category, Average)) +
geom_col(fill="#a48bc9", width = 0.5) +
geom_col(fill=color, aes(Category, Actual), width = 0.2) +
geom_errorbar(aes(y = Max, x = Category,
ymin = Max, ymax = Max),
width = 0.45) +
coord_flip() +
ggtitle('Nebraska SAT Scores Compared to US Average and Max Score') +
labs(x="Subject", y="SAT Score")
ggplot(eduSummary, aes(Category, Average)) +
geom_col(fill="#d1c5e4", width = 0.5) +
geom_col(fill=color, aes(Category, Actual), width = 0.2) +
geom_errorbar(aes(y = Max, x = Category,
ymin = Max, ymax = Max),
width = 0.45) +
coord_flip() +
ggtitle('Nebraska SAT Scores Compared to US Average and Max Score') +
labs(x="Subject", y="SAT Score")
ggplot(eduSummary, aes(Category, Average)) +
geom_col(fill="#bfaed9", width = 0.5) +
geom_col(fill=color, aes(Category, Actual), width = 0.2) +
geom_errorbar(aes(y = Max, x = Category,
ymin = Max, ymax = Max),
width = 0.45) +
coord_flip() +
ggtitle('Nebraska SAT Scores Compared to US Average and Max Score') +
labs(x="Subject", y="SAT Score")
a <- c("test", "one", "two")
typeof(a)
a
b <- read.delim("compiled_words.txt")
b
library(wordcloud)
wordcloud(b)
b <- sample(seq(0,1,0.1), length(a), replace = TRUE)
b
wordcloud(a,b)
wordcloud(a)
library(tm)
install.packages("tm")
library(tm)
wordcloud(a)
b <- read.delim("compiled_words.txt")
wordcloud(b)
b
b <- read.delim("compiled_words.txt", sep = "\t")
b
wordcloud(b)
library(wordcloud2)
install.packages("wordcloud2")
library(wordcloud2)
wordcloud2(data=b)
demoFreq
head(demoFreq)
wordcloud2(demoFreq)
