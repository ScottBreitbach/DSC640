# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C)))
ggplot(Husker_games, aes(Inc)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$Inc),
sd(Husker_games$Inc)))
ggplot(Husker_games, aes(T_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_C),
sd(Husker_games$T_C)))
ggplot(Husker_games, aes(T_S)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_S),
sd(Husker_games$T_S)))
# HISTOGRAMS: colored by variables, faceted by W/L & Home/Away
ggplot (H_G.long, aes(value, fill = variable)) + geom_histogram(position = "dodge") + facet_grid(Location ~ Win)
# BAR CHART: Comparing variables by w/L & Home/Away; not much difference in Home/Away when losing
ggplot(H_G.long, aes(variable, value, fill = variable)) + geom_bar(stat = "identity") + facet_grid(Location ~ Win)
# BAR CHARTS:
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2)
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ Win)
ggplot(H_G.long, aes(Win, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ variable)
# BAR CHARTS: just for fun, W/L by Location faceted by Opponent
ggplot(Husker_games, aes(Location, fill = Win)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Opponent)
# BAR CHART: Comparing variables by w/L & Home/Away; not much difference in Home/Away when losing
ggplot(H_G.long, aes(variable, value, fill = variable)) + geom_bar(stat = "identity") + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents by Variable, Location, and Outcome", x = "Incident Type", y = "Number of Incidents")
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents", legend.title = "Incident Type")
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents", legend(title = "Incident Type"))
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents", legend = "Incident Type")
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents", fill = "Incident Type")
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents") + theme(legend.title = "Incident Type")
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + theme(legend.title = "Incident Type") + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents")
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + theme(legend.title = element_text("Incident Type")) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents")
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents") + guides(fill=guide_legend(title="New Legend Title"))
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents") + scale_fill_discrete(name = "New Legend Title")
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents") + labs(color='NEW LEGEND TITLE')
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents", color = "Incident Type")
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents", color = "Incident Type")
# SCATTERPLOT: Compares Win/Loss over time for each variable, faceted by Home/Away; for the most part Win/Losslines cross or converge, indicating not much effect there, but Home is generally higher than Away
ggplot(Husker_games, aes(x = Date, y = A_C, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location) + labs(title = "Arrests and Citations Over Time", x = "Year", y = "Number of Incidents")
ggplot(Husker_games, aes(x = Date, y = Inc, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location) + labs(title = "Incident Reports Over Time", x = "Year", y = "Number of Incidents")
ggplot(Husker_games, aes(x = Date, y = T_C, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location) + labs(title = "Traffic Crashes Over Time", x = "Year", y = "Number of Incidents")
ggplot(Husker_games, aes(x = Date, y = T_S, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location) + labs(title = "Traffic Stops Over Time", x = "Year", y = "Number of Incidents")
# BAR CHART: Comparing variables by w/L & Home/Away; not much difference in Home/Away when losing
ggplot(H_G.long, aes(variable, value, fill = variable)) + geom_bar(stat = "identity") + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents by Variable, Location, and Outcome", x = "Incident Type", y = "Number of Incidents", color = "Incident Type")
# BAR CHART: Comparing variables by w/L & Home/Away; not much difference in Home/Away when losing
ggplot(H_G.long, aes(variable, value, fill = variable)) + geom_bar(stat = "identity") + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents by Variable, Location, and Outcome", x = "Incident Type", y = "Number of Incidents", fill = "Incident Type")
# BAR CHART: Comparing variables by w/L & Home/Away; not much difference in Home/Away when losing
ggplot(H_G.long, aes(variable, value, fill = variable)) + geom_bar(stat = "identity") + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents by Variable, Location, and Outcome", x = "Incident Type", y = "Number of Incidents", fill = "Incident Type")
# BAR CHARTS:
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2)
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ Win)
ggplot(H_G.long, aes(Win, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ variable)
# BAR CHARTS: just for fun, W/L by Location faceted by Opponent
ggplot(Husker_games, aes(Location, fill = Win)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Opponent)
# BAR CHART: Comparing variables by w/L & Home/Away; not much difference in Home/Away when losing
ggplot(H_G.long, aes(variable, value, fill = variable)) + geom_bar(stat = "identity") + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents by Variable, Location, and Outcome", x = "Incident Type", y = "Number of Incidents", fill = "Incident Type")
# BAR CHARTS:
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) + labs(title = "Public Safety Incidents by Type and Location", x = "Incident Type", y = "Number of Incidents")
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ Win) + labs(title = "Public Safety Incidents by Type, Location, and Outcome", x = "Incident Type", y = "Number of Incidents")
# BAR CHARTS: just for fun, W/L by Location faceted by Opponent
ggplot(Husker_games, aes(Location, fill = Win)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Opponent)
# BAR CHART: Comparing variables by w/L & Home/Away; not much difference in Home/Away when losing
ggplot(H_G.long, aes(variable, value, fill = variable)) + geom_bar(stat = "identity") + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents by Variable, Location, and Outcome", x = "Incident Type", y = "Number of Incidents", fill = "Incident Type")
# BAR CHARTS:
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) + labs(title = "Public Safety Incidents by Type and Location", x = "Incident Type", y = "Number of Incidents")
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ Win) + labs(title = "Public Safety Incidents by Type, Location, and Outcome", x = "Incident Type", y = "Number of Incidents")
# BAR CHARTS: just for fun, W/L by Location faceted by Opponent
ggplot(Husker_games, aes(Location, fill = Win)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Opponent) + labs(title = "Game Outcome by Opponent and Location", x = "Location", y = "Game Count")
# BAR CHART: Comparing variables by w/L & Home/Away; not much difference in Home/Away when losing
ggplot(H_G.long, aes(variable, value, fill = variable)) + geom_bar(stat = "identity") + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents by Variable, Location, and Outcome", x = element_blank(), y = "Number of Incidents", fill = "Incident Type")
# BAR CHARTS:
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) + labs(title = "Public Safety Incidents by Type and Location", x = "Incident Type", y = "Number of Incidents")
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ Win) + labs(title = "Public Safety Incidents by Type, Location, and Outcome", x = "Incident Type", y = "Number of Incidents")
# BAR CHARTS: just for fun, W/L by Location faceted by Opponent
ggplot(Husker_games, aes(Location, fill = Win)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Opponent) + labs(title = "Game Outcome by Opponent and Location", x = "Location", y = "Game Count")
# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C)))
ggplot(Husker_games, aes(Inc)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$Inc),
sd(Husker_games$Inc)))
ggplot(Husker_games, aes(T_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_C),
sd(Husker_games$T_C)))
ggplot(Husker_games, aes(T_S)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_S),
sd(Husker_games$T_S)))
# HISTOGRAMS: colored by variables, faceted by W/L & Home/Away
ggplot (H_G.long, aes(value, fill = variable)) + geom_histogram(position = "dodge") + facet_grid(Location ~ Win)
# HISTOGRAMS: colored by variables, faceted by W/L & Home/Away
ggplot (H_G.long, aes(value, fill = variable)) + geom_histogram(position = "dodge") + facet_grid(Location ~ Win) + labs(title = "Incident Types Histogram by Outcome and Location", x = "Number of Incidents",y = "Count", fill = "Incident Type")
# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C))) + labs(title = "Arrests and Citations Histogram", y = "Density")
ggplot(Husker_games, aes(Inc)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$Inc),
sd(Husker_games$Inc))) + labs(title = "Incident Reports Histogram", y = "Density")
ggplot(Husker_games, aes(T_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_C),
sd(Husker_games$T_C))) + labs(title = "Traffic Crashes Histogram", y = "Density")
ggplot(Husker_games, aes(T_S)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_S),
sd(Husker_games$T_S))) + labs(title = "Traffic Stops Histogram", y = "Density")
# HISTOGRAMS: colored by variables, faceted by W/L & Home/Away
ggplot (H_G.long, aes(value, fill = variable)) + geom_histogram(position = "dodge") + facet_grid(Location ~ Win) + labs(title = "Incident Types Histogram by Outcome and Location", x = "Number of Incidents",y = "Count", fill = "Incident Type")
1 + 3.322log(106192)
1 + 3.322*log(106192)
# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..), bins = 39) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C))) + labs(title = "Arrests and Citations Histogram", y = "Density")
1 + 3.322*log(59798)
ggplot(Husker_games, aes(Inc)) + geom_histogram(aes(y = ..density..), bins = 38) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$Inc),
sd(Husker_games$Inc))) + labs(title = "Incident Reports Histogram", y = "Density")
2*106192^(1/3)
# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..), bins = 95) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C))) + labs(title = "Arrests and Citations Histogram", y = "Density")
# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C))) + labs(title = "Arrests and Citations Histogram", y = "Density")
ggplot(Husker_games, aes(Inc)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$Inc),
sd(Husker_games$Inc))) + labs(title = "Incident Reports Histogram", y = "Density")
ggplot(Husker_games, aes(T_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_C),
sd(Husker_games$T_C))) + labs(title = "Traffic Crashes Histogram", y = "Density")
ggplot(Husker_games, aes(T_S)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_S),
sd(Husker_games$T_S))) + labs(title = "Traffic Stops Histogram", y = "Density")
# HISTOGRAMS: colored by variables, faceted by W/L & Home/Away
ggplot (H_G.long, aes(value, fill = variable)) + geom_histogram(position = "dodge") + facet_grid(Location ~ Win) + labs(title = "Incident Types Histogram by Outcome and Location", x = "Number of Incidents",y = "Count", fill = "Incident Type")
## Check for normal distribution
shapiro.test(Husker_games$A_C) # 0.8052
shapiro.test(Husker_games$Inc) # 0.001708 <- not normal
shapiro.test(Husker_games$T_C) # 0.005984 <- not normal
shapiro.test(Husker_games$T_S) # 0.8249
# Check for normalcy w/ qq plot
qplot(sample = Husker_games$A_C)
qplot(sample = Husker_games$Inc)
qplot(sample = Husker_games$T_C)
qplot(sample = Husker_games$T_S)
## Check for normal distribution
shapiro.test(Husker_games$A_C) # 0.8052
shapiro.test(Husker_games$Inc) # 0.001708 <- not normal
shapiro.test(Husker_games$T_C) # 0.005984 <- not normal
shapiro.test(Husker_games$T_S) # 0.8249
# Check for normalcy w/ qq plot
qplot(sample = Husker_games$A_C) + labs(title = "Q-Q Plot: Arrests and Citations")
qplot(sample = Husker_games$Inc) + labs(title = "Q-Q Plot: Incident Reports")
qplot(sample = Husker_games$T_C) + labs(title = "Q-Q Plot: Traffic Crashes")
qplot(sample = Husker_games$T_S) + labs(title = "Q-Q Plot: Traffic Stops")
# Check (point biserial) correlations
cor.test(H_G.coded$A_C, H_G.coded$Location) # p 0.03558
cor.test(H_G.coded$Inc, H_G.coded$Location) # p 0.5723
cor.test(H_G.coded$T_C, H_G.coded$Location) # p 0.5048
cor.test(H_G.coded$T_S, H_G.coded$Location) # p 0.4838
cor.test(H_G.coded$Tot_Inc, H_G.coded$Location) # p 0.09613
cor.test(H_G.coded$A_C, H_G.coded$Win) # p 0.1085
cor.test(H_G.coded$Inc, H_G.coded$Win) # p 0.3060
cor.test(H_G.coded$T_C, H_G.coded$Win) # p 0.4557
cor.test(H_G.coded$T_S, H_G.coded$Win) # p 0.2604
cor.test(H_G.coded$Tot_Inc, H_G.coded$Win) # p 0.1227
cor(H_G.coded[c("Location", "Win", "A_C", "Inc", "T_C", "T_S", "Tot_Inc")])
cor(H_G.coded[c("Location", "Win", "A_C", "Inc", "T_C", "T_S", "Tot_Inc")])^2 * 100
106192/(sum(106192, 59798, 13395, 74540))*100
# SCATTERPLOTS: time of day vs A_C & T_S (two normal variables), Colored by Win, Faceted by Location
ggplot(Husker_games, aes(Time, A_C, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location)
ggplot(Husker_games, aes(Time, T_S, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location)
# SCATTERPLOTS: time of day vs A_C & T_S (two normal variables), Colored by Win, Faceted by Location
ggplot(Husker_games, aes(Time, A_C, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location) + labs(title = "Arrests and Citations by Game Time, Location and Outcome", x = "Time of Day", y = "No. of Arrests and Citations")
ggplot(Husker_games, aes(Time, T_S, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location) + labs(title = "Traffic Stops by Game Time, Location and Outcome", x = "Time of Day", y = "No. of Traffic Stops")
H_G.lm <- lm(A_C ~ Opponent + Location, data = H_G.coded)
summary(H_G.lm)
round(tapply(H_G.coded$A_C, H_G.coded[c("Opponent", "Location")], mean, na.rm = TRUE), 2)
knit_with_parameters('~/GitHub/DSC520/completed/FinalProject/assignment_10.1_BreitbachScott.Rmd')
demo()
'demo()'
help()
demo()
q()
dataURL <- "http://datasets.flowingdata.com/crimeRatesByState2005.csv"
# Load the data
crime <- read.csv(dataURL, sep = ",", header = TRUE)
crime[1:3,]
head(crime)
head(crime,3)
'''Note: crime rates per 100,000 people'''
# Scatterplot: murder v burglary
plot(crime$murder, crime$burglary)
# Remove Washington, DC b/c of outliers
crime2 <- crime[crime$state != "District of Columbia"]
# Remove Washington, DC b/c of outliers
crime2 <- crime[crime$state != "District of Columbia",]
# Remove United States b/c averages
crime2 <- crime[crime$state != "United States",]
# Plot murder v burglary again
plot(crime2$murder, crime2$burglary)
# Remove Washington, DC b/c outlier
crime2 <- crime[crime$state != "District of Columbia",]
# Remove United States b/c averages
crime2 <- crime2[crime2$state != "United States",]
# Plot murder v burglary again
plot(crime2$murder, crime2$burglary)
# Plot again w/axes starting at zero
plot(crime2$murder, crime2$burglary,
xlim = c(0, 10), ylim = c(0, 1200))
# Plot again adding a LOESS curve
scatter.smooth(crime2$murder, crime2$burglary,
xlim = c(0, 10), ylim = c(0, 1200))
# Create a scatterplot matrix
plot(crime2[,2:9])
# Plot again, adding LOESS curves
pairs(crime2[,2:9], panel = panel.smooth)
dataURL2 <- "http://datasets.flowingdata.com/crimeRatesByState2005.tsv"
dataURL <- "http://datasets.flowingdata.com/crimeRatesByState2005.tsv"
del(dataURL2)
remove(dataURL2)
# Load the data
crime <- read.csv(dataURL, header = TRUE, sep = "\t")
# Create a bubble plot
symbols(crime$murder, crime$burglary, circles = crime$population)
symbols(crime$murder, crime$burglary, circles = radius)
# Note: circle sizes are based on radius by default; this is wrong
# Math the radius
radius <- sqrt( crime$population / pi )
symbols(crime$murder, crime$burglary, circles = radius)
# now everything smaller than CA is just bigger 🤔
# scale down all the circles using `inches =`
# make the maxiumum 0.35 inches
# change colors using fg (stroke color) and bg (fill color)
symbols(crime$murder, crime$burglary, circles = radius, inches = 0.35,
fg = "white", bg = "red", xlab = "Murder Rate", ylab = "Burglary Rate")
# Plot again with squares
symbols(crime$murder, crime$burglary,
squares = sqrt(crime$population), inches = 0.5)
# Back to circles; add some labels
text(crime$murder, crime$burglary, crime$state, cex = 0.5)
# Back to circles; add some labels
symbols(crime$murder, crime$burglary, circles = radius, inches = 0.35,
fg = "white", bg = "red", xlab = "Murder Rate", ylab = "Burglary Rate")
text(crime$murder, crime$burglary, crime$state, cex = 0.5)
dataURL <- "http://datasets.flowingdata.com/birth-rate.csv"
# Load data
birth <- read.csv(dataURL)
# Create stem-and-leaf plot
stem(birth$X2008)
# Create a histogram
hist(birth$X2008)
# Decrease to 5 breaks
hist(birth$X2008, breaks = 5)
# Increase to 20 breaks
hist(birth$X2008, breaks = 20)
# Get some summary stats
summary(birth$X2008)
# Create a histogram
hist(birth$X2008, filled.contour("red"))
# Create a histogram
hist(birth$X2008, filled.contour())
# Create a histogram
hist(birth$X2008, fill = "red"
# Create a histogram
hist(birth$X2008, fill = "red")
# Create a histogram
hist(birth$X2008, fill = "red")
# Create a histogram
hist(birth$X2008, color = "red")
head(birth)
birth
head(birth)
# Create a density plot using `density()` function
# Note: can't have any Null values, so remove those first
b08 <- birth$X2008[!is.na(birth$X2008)]
# pass to density function
d08 <- density(b08)
d08
d08$x
# Write to a text file, just for fun
# Set Working Directory
setwd("C:/Users/micha/OneDrive/Documents/GitHub/DSC640/VisualizeThis/Ch6/")
d08DF <- data.frame(d08$x, d08$y)
head(d08)
write.table(d08DF, "birthDensity2008.txt", sep = "\t")
write.table(d08DF, "birthDensity2008csv.txt", sep = ",", row.names = FALSE)
# Back to our previously scheduled density plot
plot(d08DF)
# Back to our previously scheduled density plot
plot(d08)
# Make a filled density plot
plot(d08, type = "n")   # "n" for no plotting
polygon(d08, col = "821122", border = "#cccccc")
polygon(d08, col = "#821122", border = "#cccccc")
polygon(d08, col = "#821111", border = "#cccccc")
# Make a filled density plot
plot(d08, type = "n")   # "n" for no plotting
polygon(d08, col = "#821111", border = "#cccccc")
polygon(d08, col = "#821122", border = "#cccccc")
# Now plot the density plot over the histogram
library(lattice)
histogram(birth$X2008, breaks = 10)
lines(d08)
lines(d08)
histogram(birth$X2008, breaks = 10)
lines(d08)
# Now plot the density plot over the histogram
library(lattice)
histogram(birth$X2008, breaks = 10)
lines(d08)
plot(d08)
dataURL <- "http://datasets.flowingdata.com/crimeRatesByState2005.csv"
# Load the data
crime <- read.csv(dataURL, sep = ",", header = TRUE)
# Note: crime rates per 100,000 people
crime[1:3,]
head(crime, 3)
# Scatterplot: murder v burglary
plot(crime$murder, crime$burglary)
# Remove Washington, DC b/c outlier
crime2 <- crime[crime$state != "District of Columbia",]
# And remove United States b/c averages
crime2 <- crime2[crime2$state != "United States",]
# Plot murder v burglary again
plot(crime2$murder, crime2$burglary)
# Plot again w/axes starting at zero
plot(crime2$murder, crime2$burglary,
xlim = c(0, 10), ylim = c(0, 1200))
# Plot again adding a LOESS curve (see Ch 4)
scatter.smooth(crime2$murder, crime2$burglary,
xlim = c(0, 10), ylim = c(0, 1200))
# Create a scatterplot matrix
plot(crime2[,2:9])
# Plot again, adding LOESS curves
pairs(crime2[,2:9], panel = panel.smooth)
## BUBBLE CHART ##
dataURL <- "http://datasets.flowingdata.com/crimeRatesByState2005.tsv"
# Load the data
crime <- read.csv(dataURL, header = TRUE, sep = "\t")
# Create a bubble plot
symbols(crime$murder, crime$burglary, circles = crime$population)
# Note: circle sizes are based on radius by default; this is wrong
# Math the radius
radius <- sqrt( crime$population / pi )
symbols(crime$murder, crime$burglary, circles = radius)
# now everything smaller than CA is just bigger
# scale down all the circles using `inches =`
# make the maxiumum 0.35 inches
# change colors using fg (stroke color) and bg (fill color)
symbols(crime$murder, crime$burglary, circles = radius, inches = 0.35,
fg = "white", bg = "red", xlab = "Murder Rate", ylab = "Burglary Rate")
# Plot again with squares (square root of size to get correct area)
symbols(crime$murder, crime$burglary,
squares = sqrt(crime$population), inches = 0.5)
# Back to circles; add some labels
symbols(crime$murder, crime$burglary, circles = radius, inches = 0.35,
fg = "white", bg = "red", xlab = "Murder Rate", ylab = "Burglary Rate")
text(crime$murder, crime$burglary, crime$state, cex = 0.5)
## DISTRIBUTION ##
dataURL <- "http://datasets.flowingdata.com/birth-rate.csv"
# Load data
birth <- read.csv(dataURL)
# Create stem-and-leaf plot
stem(birth$X2008)
# Create a histogram
hist(birth$X2008)
# Decrease to 5 breaks
hist(birth$X2008, breaks = 5)
# Increase to 20 breaks
hist(birth$X2008, breaks = 20)
# Get some summary stats
summary(birth$X2008)
# Create a density plot using `density()` function
# Note: can't have any Null values, so remove those first
b08 <- birth$X2008[!is.na(birth$X2008)]
# pass to density function
d08 <- density(b08)
d08
d08$x
# Write to a text file, just for fun
# Set Working Directory
setwd("C:/Users/micha/OneDrive/Documents/GitHub/DSC640/VisualizeThis/Ch6/")
# Put coordinates in a data frame
d08DF <- data.frame(d08$x, d08$y)
# Save to text file
write.table(d08DF, "birthDensity2008.txt", sep = "\t")
write.table(d08DF, "birthDensity2008csv.txt", sep = ",", row.names = FALSE)
# Now you can load the data in another program!
# Back to our previously scheduled density plot
plot(d08)
# Make a filled density plot
plot(d08, type = "n")   # "n" for no plotting
polygon(d08, col = "#821122", border = "#cccccc")
# Now plot the density plot over the histogram
library(lattice)
histogram(birth$X2008, breaks = 10)
lines(d08)
python transform-birth-rate.py > birth-rate-yearly.csv
birthYearly <- read.csv("birth-rate-yearly.csv")
birthYearly
histogram(~ Rate | Year, data = birthYearly, layout = c(10,5))
summary(birthYearly)
birthYearly.new <- birthYearly[birthYearly$Rate < 132,]
histogram(~ Rate | Year, data = birthYearly.new, layout = c(10,5))
# Change Years to characters so they format correctly
birthYearly.new$Year <- as.character(birthYearly.new$Year)
histogram(~ Rate | Year, data = birthYearly.new, layout = c(10,5))
# Time to update the order
# Store the histogram matrix as a variable
h <- histogram(~ Rate | Year, data = birthYearly.new, layout = c(10,5))
# Use `update()` to update the order
update(h, index.cond = list(c(41:50, 31:40, 21:30, 11:20, 1:10)))
# Television sizes over the years
# Load data
tvs <- read.table('http://datasets.flowingdata.com/tv_sizes.txt',
sep = '\t', header = TRUE)
# Filter outliers
tvs <- tvs[tvs$size < 80, ]
tvs <- tvs[tvs$size > 10, ]
# Set breaks for histograms
breaks = seq(10, 80, by=5)
# Set the layout
par(mfrow=c(4,2))
# Draw histograms, one by one
hist(tvs[tvs$year == 2009,]$size, breaks = breaks)
hist(tvs[tvs$year == 2008,]$size, breaks = breaks)
hist(tvs[tvs$year == 2007,]$size, breaks = breaks)
hist(tvs[tvs$year == 2006,]$size, breaks = breaks)
hist(tvs[tvs$year == 2005,]$size, breaks = breaks)
hist(tvs[tvs$year == 2004,]$size, breaks = breaks)
hist(tvs[tvs$year == 2003,]$size, breaks = breaks)
hist(tvs[tvs$year == 2002,]$size, breaks = breaks)
# Set the layout
par(mfrow=c(8,1))
# Draw histograms, one by one
hist(tvs[tvs$year == 2009,]$size, breaks = breaks)
hist(tvs[tvs$year == 2008,]$size, breaks = breaks)
hist(tvs[tvs$year == 2007,]$size, breaks = breaks)
hist(tvs[tvs$year == 2006,]$size, breaks = breaks)
hist(tvs[tvs$year == 2005,]$size, breaks = breaks)
hist(tvs[tvs$year == 2004,]$size, breaks = breaks)
hist(tvs[tvs$year == 2003,]$size, breaks = breaks)
hist(tvs[tvs$year == 2002,]$size, breaks = breaks)
# Set the layout
par(mfrow=c(4,2))
# Draw histograms, one by one
hist(tvs[tvs$year == 2009,]$size, breaks = breaks)
hist(tvs[tvs$year == 2008,]$size, breaks = breaks)
hist(tvs[tvs$year == 2007,]$size, breaks = breaks)
hist(tvs[tvs$year == 2006,]$size, breaks = breaks)
hist(tvs[tvs$year == 2005,]$size, breaks = breaks)
hist(tvs[tvs$year == 2004,]$size, breaks = breaks)
hist(tvs[tvs$year == 2003,]$size, breaks = breaks)
hist(tvs[tvs$year == 2002,]$size, breaks = breaks)
