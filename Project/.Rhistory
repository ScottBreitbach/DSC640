ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2)
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ Win)
ggplot(H_G.long, aes(Win, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ variable)
# BAR CHARTS: just for fun, W/L by Location faceted by Opponent
ggplot(Husker_games, aes(Location, fill = Win)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Opponent)
# BAR CHART: Comparing variables by w/L & Home/Away; not much difference in Home/Away when losing
ggplot(H_G.long, aes(variable, value, fill = variable)) + geom_bar(stat = "identity") + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents by Variable, Location, and Outcome", x = "Incident Type", y = "Number of Incidents", fill = "Incident Type")
# BAR CHARTS:
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) + labs(title = "Public Safety Incidents by Type and Location", x = "Incident Type", y = "Number of Incidents")
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ Win) + labs(title = "Public Safety Incidents by Type, Location, and Outcome", x = "Incident Type", y = "Number of Incidents")
# BAR CHARTS: just for fun, W/L by Location faceted by Opponent
ggplot(Husker_games, aes(Location, fill = Win)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Opponent)
# BAR CHART: Comparing variables by w/L & Home/Away; not much difference in Home/Away when losing
ggplot(H_G.long, aes(variable, value, fill = variable)) + geom_bar(stat = "identity") + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents by Variable, Location, and Outcome", x = "Incident Type", y = "Number of Incidents", fill = "Incident Type")
# BAR CHARTS:
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) + labs(title = "Public Safety Incidents by Type and Location", x = "Incident Type", y = "Number of Incidents")
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ Win) + labs(title = "Public Safety Incidents by Type, Location, and Outcome", x = "Incident Type", y = "Number of Incidents")
# BAR CHARTS: just for fun, W/L by Location faceted by Opponent
ggplot(Husker_games, aes(Location, fill = Win)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Opponent) + labs(title = "Game Outcome by Opponent and Location", x = "Location", y = "Game Count")
# BAR CHART: Comparing variables by w/L & Home/Away; not much difference in Home/Away when losing
ggplot(H_G.long, aes(variable, value, fill = variable)) + geom_bar(stat = "identity") + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents by Variable, Location, and Outcome", x = element_blank(), y = "Number of Incidents", fill = "Incident Type")
# BAR CHARTS:
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) + labs(title = "Public Safety Incidents by Type and Location", x = "Incident Type", y = "Number of Incidents")
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ Win) + labs(title = "Public Safety Incidents by Type, Location, and Outcome", x = "Incident Type", y = "Number of Incidents")
# BAR CHARTS: just for fun, W/L by Location faceted by Opponent
ggplot(Husker_games, aes(Location, fill = Win)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Opponent) + labs(title = "Game Outcome by Opponent and Location", x = "Location", y = "Game Count")
# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C)))
ggplot(Husker_games, aes(Inc)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$Inc),
sd(Husker_games$Inc)))
ggplot(Husker_games, aes(T_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_C),
sd(Husker_games$T_C)))
ggplot(Husker_games, aes(T_S)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_S),
sd(Husker_games$T_S)))
# HISTOGRAMS: colored by variables, faceted by W/L & Home/Away
ggplot (H_G.long, aes(value, fill = variable)) + geom_histogram(position = "dodge") + facet_grid(Location ~ Win)
# HISTOGRAMS: colored by variables, faceted by W/L & Home/Away
ggplot (H_G.long, aes(value, fill = variable)) + geom_histogram(position = "dodge") + facet_grid(Location ~ Win) + labs(title = "Incident Types Histogram by Outcome and Location", x = "Number of Incidents",y = "Count", fill = "Incident Type")
# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C))) + labs(title = "Arrests and Citations Histogram", y = "Density")
ggplot(Husker_games, aes(Inc)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$Inc),
sd(Husker_games$Inc))) + labs(title = "Incident Reports Histogram", y = "Density")
ggplot(Husker_games, aes(T_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_C),
sd(Husker_games$T_C))) + labs(title = "Traffic Crashes Histogram", y = "Density")
ggplot(Husker_games, aes(T_S)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_S),
sd(Husker_games$T_S))) + labs(title = "Traffic Stops Histogram", y = "Density")
# HISTOGRAMS: colored by variables, faceted by W/L & Home/Away
ggplot (H_G.long, aes(value, fill = variable)) + geom_histogram(position = "dodge") + facet_grid(Location ~ Win) + labs(title = "Incident Types Histogram by Outcome and Location", x = "Number of Incidents",y = "Count", fill = "Incident Type")
1 + 3.322log(106192)
1 + 3.322*log(106192)
# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..), bins = 39) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C))) + labs(title = "Arrests and Citations Histogram", y = "Density")
1 + 3.322*log(59798)
ggplot(Husker_games, aes(Inc)) + geom_histogram(aes(y = ..density..), bins = 38) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$Inc),
sd(Husker_games$Inc))) + labs(title = "Incident Reports Histogram", y = "Density")
2*106192^(1/3)
# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..), bins = 95) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C))) + labs(title = "Arrests and Citations Histogram", y = "Density")
# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C))) + labs(title = "Arrests and Citations Histogram", y = "Density")
ggplot(Husker_games, aes(Inc)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$Inc),
sd(Husker_games$Inc))) + labs(title = "Incident Reports Histogram", y = "Density")
ggplot(Husker_games, aes(T_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_C),
sd(Husker_games$T_C))) + labs(title = "Traffic Crashes Histogram", y = "Density")
ggplot(Husker_games, aes(T_S)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_S),
sd(Husker_games$T_S))) + labs(title = "Traffic Stops Histogram", y = "Density")
# HISTOGRAMS: colored by variables, faceted by W/L & Home/Away
ggplot (H_G.long, aes(value, fill = variable)) + geom_histogram(position = "dodge") + facet_grid(Location ~ Win) + labs(title = "Incident Types Histogram by Outcome and Location", x = "Number of Incidents",y = "Count", fill = "Incident Type")
## Check for normal distribution
shapiro.test(Husker_games$A_C) # 0.8052
shapiro.test(Husker_games$Inc) # 0.001708 <- not normal
shapiro.test(Husker_games$T_C) # 0.005984 <- not normal
shapiro.test(Husker_games$T_S) # 0.8249
# Check for normalcy w/ qq plot
qplot(sample = Husker_games$A_C)
qplot(sample = Husker_games$Inc)
qplot(sample = Husker_games$T_C)
qplot(sample = Husker_games$T_S)
## Check for normal distribution
shapiro.test(Husker_games$A_C) # 0.8052
shapiro.test(Husker_games$Inc) # 0.001708 <- not normal
shapiro.test(Husker_games$T_C) # 0.005984 <- not normal
shapiro.test(Husker_games$T_S) # 0.8249
# Check for normalcy w/ qq plot
qplot(sample = Husker_games$A_C) + labs(title = "Q-Q Plot: Arrests and Citations")
qplot(sample = Husker_games$Inc) + labs(title = "Q-Q Plot: Incident Reports")
qplot(sample = Husker_games$T_C) + labs(title = "Q-Q Plot: Traffic Crashes")
qplot(sample = Husker_games$T_S) + labs(title = "Q-Q Plot: Traffic Stops")
# Check (point biserial) correlations
cor.test(H_G.coded$A_C, H_G.coded$Location) # p 0.03558
cor.test(H_G.coded$Inc, H_G.coded$Location) # p 0.5723
cor.test(H_G.coded$T_C, H_G.coded$Location) # p 0.5048
cor.test(H_G.coded$T_S, H_G.coded$Location) # p 0.4838
cor.test(H_G.coded$Tot_Inc, H_G.coded$Location) # p 0.09613
cor.test(H_G.coded$A_C, H_G.coded$Win) # p 0.1085
cor.test(H_G.coded$Inc, H_G.coded$Win) # p 0.3060
cor.test(H_G.coded$T_C, H_G.coded$Win) # p 0.4557
cor.test(H_G.coded$T_S, H_G.coded$Win) # p 0.2604
cor.test(H_G.coded$Tot_Inc, H_G.coded$Win) # p 0.1227
cor(H_G.coded[c("Location", "Win", "A_C", "Inc", "T_C", "T_S", "Tot_Inc")])
cor(H_G.coded[c("Location", "Win", "A_C", "Inc", "T_C", "T_S", "Tot_Inc")])^2 * 100
106192/(sum(106192, 59798, 13395, 74540))*100
# SCATTERPLOTS: time of day vs A_C & T_S (two normal variables), Colored by Win, Faceted by Location
ggplot(Husker_games, aes(Time, A_C, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location)
ggplot(Husker_games, aes(Time, T_S, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location)
# SCATTERPLOTS: time of day vs A_C & T_S (two normal variables), Colored by Win, Faceted by Location
ggplot(Husker_games, aes(Time, A_C, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location) + labs(title = "Arrests and Citations by Game Time, Location and Outcome", x = "Time of Day", y = "No. of Arrests and Citations")
ggplot(Husker_games, aes(Time, T_S, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location) + labs(title = "Traffic Stops by Game Time, Location and Outcome", x = "Time of Day", y = "No. of Traffic Stops")
H_G.lm <- lm(A_C ~ Opponent + Location, data = H_G.coded)
summary(H_G.lm)
round(tapply(H_G.coded$A_C, H_G.coded[c("Opponent", "Location")], mean, na.rm = TRUE), 2)
knit_with_parameters('~/GitHub/DSC520/completed/FinalProject/assignment_10.1_BreitbachScott.Rmd')
demo()
'demo()'
help()
demo()
q()
# Set Working Directory
setwd("C:/Users/micha/OneDrive/Documents/GitHub/DSC640/Project/")
# Load libraries
library(ggplot2)
library(dplyr)
# Load data
fpbDF <- read.csv("Passenger-Fatalities-per-Billion.csv")
fpbDF
modeDF <- read.csv("modeOfTransport.csv")
modeDF
# Set color palette
colPal = "Dark2"
swBlu = "#2E4BB1"
swRed = "#E61C23"
swYel = "#FDB912"
# Bar plot of fatalities per billion miles
ggplot(fpbDF, aes(x=Mode_of_Transport, y=Fatal_per_Bil_mi)) +
geom_bar(stat = "identity") +
coord_flip()
# Fix order of barplot; sort by number of fatalities
fpbDF %>%
arrange(Fatal_per_Bil_mi) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Mode_of_Transport=factor(Mode_of_Transport, levels=Mode_of_Transport)) %>%   # This trick update the factor levels
# ggplot(aes(x=Mode_of_Transport, y=Fatal_per_Bil_mi)) +
ggplot(aes(x=Mode_of_Transport, y=Fatal_per_Bil_mi)) +
geom_bar(stat = "identity", width = 0.4) +#( aes(xend=name, yend=0)) +
# geom_point( size=4, color="orange") +
# scale_fill_brewer(palette = colPal) +
# theme_bw() +
theme(legend.position = "none") +
coord_flip() +
geom_text(aes(label = Fatal_per_Bil_mi), hjust = "inward") +
xlab("") + ylab("Fatalities") +
ggtitle("Fatalities per Billion Miles Traveled")
# # 3: Using RColorBrewer
# ggplot(mtcars, aes(x=as.factor(cyl), fill=as.factor(cyl) )) +
#   geom_bar( ) +
#   scale_fill_brewer(palette = "Set1") +
#   theme(legend.position="none")
modeDF %>%
arrange(Fatal_per_Bil_km) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Mode_of_Transport=factor(Mode_of_Transport, levels=Mode_of_Transport)) %>%   # This trick update the factor levels
ggplot(aes(x=Mode_of_Transport, y=Fatal_per_Bil_hr)) +
geom_bar(stat = "identity", width = 0.4, fill = swBlu) +
theme(legend.position = "none") +
coord_flip() +
geom_text(aes(label = Fatal_per_Bil_hr), hjust = "inward") +
xlab("") + ylab("Fatalities") +
ggtitle("Fatalities per Billion Hours Traveled")
modeDF %>%
arrange(Fatal_per_Bil_km) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Mode_of_Transport=factor(Mode_of_Transport, levels=Mode_of_Transport)) %>%   # This trick update the factor levels
ggplot(aes(x=Mode_of_Transport, y=Fatal_per_Bil_Trips)) +
geom_bar(stat = "identity", width = 0.4, fill = swBlu) +
theme(legend.position = "none") +
coord_flip() +
geom_text(aes(label = Fatal_per_Bil_Trips), hjust = "inward") +
xlab("") + ylab("Fatalities") +
ggtitle("Fatalities per Billion Trips")
modeDF %>%
arrange(Fatal_per_Bil_km) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Mode_of_Transport=factor(Mode_of_Transport, levels=Mode_of_Transport)) %>%   # This trick update the factor levels
ggplot(aes(x=Mode_of_Transport, y=Fatal_per_Bil_km)) +
geom_bar(stat = "identity", width = 0.4, fill = swBlu) +
theme(legend.position = "none") +
coord_flip() +
geom_text(aes(label = Fatal_per_Bil_km), hjust = "inward") +
xlab("") + ylab("Fatalities") +
ggtitle("Fatalities per Billion Kilometers Traveled")
#================================#
# Load data
accYrDF <- read.csv("ASN_accid_fatal_passenger_yr_filtered.csv")
names(accYrDF)
barWidth = 0.9
# Plot data
ggplot(accYrDF, aes(x=Year)) +
geom_bar(aes(y=Accidents),
stat = "identity", fill = swBlu, width = barWidth) +
geom_line(aes(y=NumAcc5YrAvg), color = swRed, size = 1) +
ggtitle("Fatal Accidents: Passenger Flights by Year") +
ylab("Number of Fatal Accidents") +
theme_classic()
ggplot(accYrDF, aes(x=Year)) +
geom_bar(aes(y=World.air.traffic..MM.departures.),
stat = "identity", fill = swBlu, width = barWidth) +
ggtitle("Number of Flights per Year") +
ylab("Number of Flights (millions)") +
theme_classic()
ggplot(accYrDF, aes(x=Year)) +
geom_bar(aes(y=Fatal.accidents.per.mln.flights),
stat = "identity", fill = swBlu, width = barWidth) +
geom_line(aes(y=AccPrM5YrAvg), color = swRed, size = 1) +
ggtitle("Fatal Accidents per Million Flights") +
ylab("Accidents per Million") +
theme_classic()
modeDF %>%
arrange(Fatal_per_Bil_km) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Mode_of_Transport=factor(Mode_of_Transport, levels=Mode_of_Transport)) %>%   # This trick update the factor levels
ggplot(aes(x=Mode_of_Transport, y=Fatal_per_Bil_hr)) +
geom_bar(stat = "identity", width = 0.4, fill = swBlu) +
theme(legend.position = "none") +
coord_flip() +
geom_text(aes(label = Fatal_per_Bil_hr), hjust = "inward") +
xlab("") + ylab("Fatalities") +
ggtitle("Fatalities per Billion Hours Traveled")
modeDF %>%
arrange(Fatal_per_Bil_km) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Mode_of_Transport=factor(Mode_of_Transport, levels=Mode_of_Transport)) %>%   # This trick update the factor levels
ggplot(aes(x=Mode_of_Transport, y=Fatal_per_Bil_km)) +
geom_bar(stat = "identity", width = 0.4, fill = swBlu) +
theme(legend.position = "none") +
coord_flip() +
geom_text(aes(label = Fatal_per_Bil_km), hjust = "inward") +
xlab("") + ylab("Fatalities") +
ggtitle("Fatalities per Billion Kilometers Traveled")
modeDF %>%
arrange(Fatal_per_Bil_km) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Mode_of_Transport=factor(Mode_of_Transport, levels=Mode_of_Transport)) %>%   # This trick update the factor levels
ggplot(aes(x=Mode_of_Transport, y=Fatal_per_Bil_hr)) +
geom_bar(stat = "identity", width = 0.4, fill = swBlu) +
theme(legend.position = "none") +
coord_flip() +
geom_text(aes(label = Fatal_per_Bil_hr), hjust = "inward") +
xlab("") + ylab("Fatalities") +
ggtitle("Fatalities per Billion Hours Traveled")
modeDF %>%
arrange(Fatal_per_Bil_km) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Mode_of_Transport=factor(Mode_of_Transport, levels=Mode_of_Transport)) %>%   # This trick update the factor levels
ggplot(aes(x=Mode_of_Transport, y=Fatal_per_Bil_Trips)) +
geom_bar(stat = "identity", width = 0.4, fill = swBlu) +
theme(legend.position = "none") +
coord_flip() +
geom_text(aes(label = Fatal_per_Bil_Trips), hjust = "inward") +
xlab("") + ylab("Fatalities") +
ggtitle("Fatalities per Billion Trips")
modeDF %>%
arrange(Fatal_per_Bil_km) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Mode_of_Transport=factor(Mode_of_Transport, levels=Mode_of_Transport)) %>%   # This trick update the factor levels
ggplot(aes(x=Mode_of_Transport, y=Fatal_per_Bil_km)) +
geom_bar(stat = "identity", width = 0.4, fill = swBlu) +
theme(legend.position = "none") +
coord_flip() +
geom_text(aes(label = Fatal_per_Bil_km), hjust = "inward") +
xlab("") + ylab("Fatalities") +
ggtitle("Fatalities per Billion Kilometers Traveled")
modeDF %>%
arrange(Fatal_per_Bil_km) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Mode_of_Transport=factor(Mode_of_Transport, levels=Mode_of_Transport)) %>%   # This trick update the factor levels
ggplot(aes(x=Mode_of_Transport, y=Fatal_per_Bil_hr)) +
geom_bar(stat = "identity", width = 0.4, fill = swBlu) +
theme(legend.position = "none") +
coord_flip() +
geom_text(aes(label = Fatal_per_Bil_hr), hjust = "inward") +
xlab("") + ylab("Fatalities") +
ggtitle("Fatalities per Billion Hours Traveled")
modeDF %>%
arrange(Fatal_per_Bil_km) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Mode_of_Transport=factor(Mode_of_Transport, levels=Mode_of_Transport)) %>%   # This trick update the factor levels
ggplot(aes(x=Mode_of_Transport, y=Fatal_per_Bil_Trips)) +
geom_bar(stat = "identity", width = 0.4, fill = swBlu) +
theme(legend.position = "none") +
coord_flip() +
geom_text(aes(label = Fatal_per_Bil_Trips), hjust = "inward") +
xlab("") + ylab("Fatalities") +
ggtitle("Fatalities per Billion Trips")
modeDF %>%
arrange(Fatal_per_Bil_km) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Mode_of_Transport=factor(Mode_of_Transport, levels=Mode_of_Transport)) %>%   # This trick update the factor levels
ggplot(aes(x=Mode_of_Transport, y=Fatal_per_Bil_km)) +
geom_bar(stat = "identity", width = 0.4, fill = swBlu) +
theme(legend.position = "none") +
coord_flip() +
geom_text(aes(label = Fatal_per_Bil_km), hjust = "inward") +
xlab("") + ylab("Fatalities") +
ggtitle("Fatalities per Billion Kilometers Traveled") +
theme_classic()
modeDF %>%
arrange(Fatal_per_Bil_km) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Mode_of_Transport=factor(Mode_of_Transport, levels=Mode_of_Transport)) %>%   # This trick update the factor levels
ggplot(aes(x=Mode_of_Transport, y=Fatal_per_Bil_km)) +
geom_bar(stat = "identity", width = 0.4, fill = swBlu) +
theme(legend.position = "none") +
coord_flip() +
geom_text(aes(label = Fatal_per_Bil_km), hjust = "inward") +
xlab("") + ylab("Fatalities") +
ggtitle("Fatalities per Billion Kilometers Traveled") +
theme_minimal()
theme_classic
modeDF %>%
arrange(Fatal_per_Bil_km) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Mode_of_Transport=factor(Mode_of_Transport, levels=Mode_of_Transport)) %>%   # This trick update the factor levels
ggplot(aes(x=Mode_of_Transport, y=Fatal_per_Bil_km)) +
geom_bar(stat = "identity", width = 0.4, fill = swBlu) +
theme(legend.position = "none") +
coord_flip() +
geom_text(aes(label = Fatal_per_Bil_km), hjust = "inward") +
xlab("") + ylab("Fatalities") +
ggtitle("Fatalities per Billion Kilometers Traveled") +
theme_classic()
modeDF %>%
arrange(Fatal_per_Bil_km) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Mode_of_Transport=factor(Mode_of_Transport, levels=Mode_of_Transport)) %>%   # This trick update the factor levels
ggplot(aes(x=Mode_of_Transport, y=Fatal_per_Bil_hr)) +
geom_bar(stat = "identity", width = 0.4, fill = swBlu) +
theme(legend.position = "none") +
coord_flip() +
geom_text(aes(label = Fatal_per_Bil_hr), hjust = "inward") +
xlab("") + ylab("Fatalities") +
ggtitle("Fatalities per Billion Hours Traveled") +
theme_classic()
modeDF %>%
arrange(Fatal_per_Bil_km) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Mode_of_Transport=factor(Mode_of_Transport, levels=Mode_of_Transport)) %>%   # This trick update the factor levels
ggplot(aes(x=Mode_of_Transport, y=Fatal_per_Bil_Trips)) +
geom_bar(stat = "identity", width = 0.4, fill = swBlu) +
theme(legend.position = "none") +
coord_flip() +
geom_text(aes(label = Fatal_per_Bil_Trips), hjust = "inward") +
xlab("") + ylab("Fatalities") +
ggtitle("Fatalities per Billion Trips")+
theme_classic()
# Plot data
# Passenger flights with Fatal Accidents each Year
ggplot(accYrDF, aes(x=Year)) +
geom_bar(aes(y=Accidents),
stat = "identity", fill = swBlu, width = barWidth) +
geom_line(aes(y=NumAcc5YrAvg), color = swRed, size = 1) +
ggtitle("Passenger flights with Fatal Accidents each Year") +
ylab("Number of Fatal Accidents") +
theme_classic()
barWidth = 0.8
# Plot data
# Passenger flights with Fatal Accidents each Year
ggplot(accYrDF, aes(x=Year)) +
geom_bar(aes(y=Accidents),
stat = "identity", fill = swBlu, width = barWidth) +
geom_line(aes(y=NumAcc5YrAvg), color = swRed, size = 1) +
ggtitle("Passenger flights with Fatal Accidents each Year") +
ylab("Number of Fatal Accidents") +
theme_classic()
ggplot(accYrDF, aes(x=Year)) +
geom_bar(aes(y=World.air.traffic..MM.departures.),
stat = "identity", fill = swBlu, width = barWidth) +
ggtitle("Number of Flights per Year") +
ylab("Number of Flights (millions)") +
theme_classic()
ggplot(accYrDF, aes(x=Year)) +
geom_bar(aes(y=Fatal.accidents.per.mln.flights),
stat = "identity", fill = swBlu, width = barWidth) +
geom_line(aes(y=AccPrM5YrAvg), color = swRed, size = 1) +
ggtitle("Fatal Accidents per Million Flights each Year") +
ylab("Accidents per MM Flights") +
theme_classic()
colors <- c("NumAcc5YrAvg" = swRed, "AccPrM5YrAvg" = swRed)
# Plot data
# Passenger flights with Fatal Accidents each Year
ggplot(accYrDF, aes(x=Year)) +
geom_bar(aes(y=Accidents),
stat = "identity", fill = swBlu, width = barWidth) +
geom_line(aes(y=NumAcc5YrAvg), color = NumAcc5YrAvg, size = 1) +
ggtitle("Passenger flights with Fatal Accidents each Year") +
ylab("Number of Fatal Accidents") +
theme_classic()
# Plot data
# Passenger flights with Fatal Accidents each Year
ggplot(accYrDF, aes(x=Year)) +
geom_bar(aes(y=Accidents),
stat = "identity", fill = swBlu, width = barWidth) +
geom_line(aes(y=NumAcc5YrAvg), color = "NumAcc5YrAvg", size = 1) +
ggtitle("Passenger flights with Fatal Accidents each Year") +
ylab("Number of Fatal Accidents") +
theme_classic()
# Plot data
# Passenger flights with Fatal Accidents each Year
ggplot(accYrDF, aes(x=Year)) +
geom_bar(aes(y=Accidents),
stat = "identity", fill = swBlu, width = barWidth) +
geom_line(aes(y=NumAcc5YrAvg), color = "NumAcc5YrAvg", size = 1) +
ggtitle("Passenger flights with Fatal Accidents each Year") +
ylab("Number of Fatal Accidents") +
scale_color_manual(values = colors)
# Plot data
# Passenger flights with Fatal Accidents each Year
ggplot(accYrDF, aes(x=Year)) +
geom_bar(aes(y=Accidents),
stat = "identity", fill = swBlu, width = barWidth) +
geom_line(aes(y=NumAcc5YrAvg), color = swRed, size = 1) +
ggtitle("Passenger flights with Fatal Accidents each Year") +
ylab("Number of Fatal Accidents") +
scale_color_manual(values = colors)
# Plot data
# Passenger flights with Fatal Accidents each Year
ggplot(accYrDF, aes(x=Year)) +
geom_bar(aes(y=Accidents),
stat = "identity", fill = swBlu, width = barWidth) +
geom_line(aes(y=NumAcc5YrAvg), color = swRed, size = 1) +
ggtitle("Passenger flights with Fatal Accidents each Year") +
ylab("Number of Fatal Accidents") +
scale_color_manual(values = colors) +
labs(color = "Legend") +
theme_classic()
# Plot data
# Passenger flights with Fatal Accidents each Year
ggplot(accYrDF, aes(x=Year)) +
geom_bar(aes(y=Accidents),
stat = "identity", fill = swBlu, width = barWidth) +
geom_line(aes(y=NumAcc5YrAvg), color = "NumAcc5YrAvg", size = 1) +
ggtitle("Passenger flights with Fatal Accidents each Year") +
ylab("Number of Fatal Accidents") +
scale_color_manual(values = colors) +
labs(color = "Legend") +
theme_classic()
# Plot data
# Passenger flights with Fatal Accidents each Year
ggplot(accYrDF, aes(x=Year)) +
geom_bar(aes(y=Accidents),
stat = "identity", fill = swBlu, width = barWidth) +
geom_line(aes(y=NumAcc5YrAvg), color = NumAcc5YrAvg, size = 1) +
ggtitle("Passenger flights with Fatal Accidents each Year") +
ylab("Number of Fatal Accidents") +
scale_color_manual(values = colors) +
labs(color = "Legend") +
theme_classic()
# Plot data
# Passenger flights with Fatal Accidents each Year
ggplot(accYrDF, aes(x=Year)) +
geom_bar(aes(y=Accidents),
stat = "identity", fill = swBlu, width = barWidth) +
geom_line(aes(y=NumAcc5YrAvg), color = swRed, size = 1) +
ggtitle("Passenger flights with Fatal Accidents each Year") +
ylab("Number of Fatal Accidents") +
scale_color_manual(values = colors) +
labs(color = "Legend") +
theme_classic()
# Plot data
# Passenger flights with Fatal Accidents each Year
ggplot(accYrDF, aes(x=Year)) +
geom_bar(aes(y=Accidents),
stat = "identity", fill = swBlu, width = barWidth) +
geom_line(aes(y=NumAcc5YrAvg), color = swRed, size = 1) +
ggtitle("Passenger flights with Fatal Accidents each Year") +
ylab("Number of Fatal Accidents") +
theme_classic()
