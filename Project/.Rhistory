## HISTOGRAMS
ggplot(H_G.long, aes(value, fill = Win)) + geom_histogram() + facet_grid(Win ~ variable)
# ^^
ggplot(Husker_games, aes(Location, fill = Win)) + geom_histogram(position = "dodge")
# ^^
ggplot(H_G.coded, aes(Location, fill = Win)) + geom_histogram(position = "dodge")
# ^^
ggplot(H_G.coded, aes(Location, fill = Win)) + geom_histogram(position = "dodge", fill = Win)
# ^^
ggplot(H_G.coded, aes(Location, fill = Win)) + geom_histogram(position = "dodge")
## HISTOGRAMS
ggplot(H_G.long, aes(value, fill = Win)) + geom_histogram() + facet_grid(Win ~ variable)
# ^^
ggplot(H_G.coded, aes(Win, fill = Win)) + geom_histogram(position = "dodge")
# ^^
ggplot(H_G.coded, aes(Win, fill = Location)) + geom_histogram(position = "dodge")
# ^^
ggplot(H_G.coded, aes(Win)) + geom_histogram(position = "dodge") + facet_wrap(~ Location)
ggplot(Husker_games, aes(Win)) + geom_histogram(position = "dodge") + facet_wrap(~ Location)
ggplot(Husker_games, aes(Win)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Location)
ggplot(Husker_games, aes(Win)) + geom_histogram(position = "dodge", stat = "count", fill = Opponent) + facet_wrap(~ Location)
ggplot(Husker_games, aes(Win, fill = Opponent)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Location)
ggplot(Husker_games, aes(Win, fill = Win)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Location)
ggplot(Husker_games, aes(Win, fill = Win)) + geom_histogram(position = "dodge", stat = "count") + facet_grid(Opponent ~ Location)
ggplot(Husker_games, aes(Win, fill = Win)) + geom_histogram(position = "dodge", stat = "count") + facet_grid(Location ~ Opponent)
ggplot(Husker_games, aes(Win, fill = Win)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Opponent)
ggplot(Husker_games, aes(Win, fill = Location)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Opponent)
ggplot(Husker_games, aes(Location, fill = Location)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Opponent)
ggplot(Husker_games, aes(Location, fill = Win)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Opponent)
## EXPLORING ASSUMPTIONS
shapiro.test(Husker_games$A_C) # 0.8052
shapiro.test(Husker_games$Inc) # 0.001708 <- not normal
shapiro.test(Husker_games$T_C) # 0.005984 <- not normal
shapiro.test(Husker_games$T_S) # 0.8249
by(Husker_games$A_C, Husker_games$Location, shapiro.test)
by(H_G.long$value, H_G.long$Location, shapiro.test)
## CORRELATION
# Husker_games[c("Day", "Location")] # test
cor(Husker_games$A_C, Husker_games$Inc)
cor(Husker_games$A_C, Husker_games$Location)
cor(H_G.coded$A_C, H_G.coded$Location)
cor(H_G.coded$Inc, H_G.coded$Location)
cor(H_G.coded$T_C, H_G.coded$Location)
cor(H_G.coded$T_S, H_G.coded$Location)
cor(H_G.coded$A_C, H_G.coded$Win)
cor(H_G.coded$Inc, H_G.coded$Win)
cor(H_G.coded$T_C, H_G.coded$Win)
cor(H_G.coded$T_S, H_G.coded$Win)
cor.test(H_G.coded$A_C, H_G.coded$Location)
## CORRELATION
# Husker_games[c("Day", "Location")] # test
# cor(Husker_games$A_C, Husker_games$Inc)
cor(H_G.coded$A_C, H_G.coded$Location)
# see below vvv
# Point-biserial correlation coefficient
cor(H_G.coded[c("Location", "Win", "A_C", "Inc", "T_C", "T_S", "Tot_Inc")])
cor.test(H_G.coded$A_C, H_G.coded$Location) # p 0.03558
str(cor.test(H_G.coded$A_C, H_G.coded$Location))
# LINEAR REGRESSION
# Multiple
loc.lm <- lm(H_G.coded$Location, ~ A_C + Inc + T_C + T_S, data = H_G.coded)
H_G.lm <- lm(A_C ~ Opponent, data = H_G.coded)
summary(H_G.lm)
# ^^^ not sure how to explain, but probably should include (maybe a make subset of home games?)
round(tapply(H_G.coded$A_C, H_G.coded$Opponent, mean, na.rm = TRUE), 3)
# ^ tapply by Opponent
H_G.lm.2 <- lm(A_C ~ Opponent + Location, data = H_G.coded)
summary(H_G.lm.2)
round(tapply(H_G.coded$A_C, H_G.coded[c("Opponent", "Location")], mean, na.rm = TRUE), 3)
round(tapply(H_G.coded$A_C, H_G.coded[c("Opponent", "Location")], mean, na.rm = TRUE), 2)
# SCATTERPLOTS: time of day vs A_C & T_S (two normal variables), Colored by Win, Faceted by Location
ggplot(Husker_games, aes(Time, A_C, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location)
ggplot(Husker_games, aes(Time, T_S, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location)
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win)
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win)
# SCATTERPLOT: Compares Win/Loss over time for each variable, faceted by Home/Away; for the most part Win/Losslines cross or converge, indicating not much effect there, but Home is generally higher than Away
ggplot(Husker_games, aes(x = Date, y = A_C, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location)
ggplot(Husker_games, aes(x = Date, y = Inc, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location)
ggplot(Husker_games, aes(x = Date, y = T_C, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location)
ggplot(Husker_games, aes(x = Date, y = T_S, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location)
?theme()
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs("title = Public Safety incidents over time", x = "Year", y = "Number of Incidents")
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety incidents over time", x = "Year", y = "Number of Incidents")
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents")
# SCATTERPLOT: Compares Win/Loss over time for each variable, faceted by Home/Away; for the most part Win/Losslines cross or converge, indicating not much effect there, but Home is generally higher than Away
ggplot(Husker_games, aes(x = Date, y = A_C, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location)
ggplot(Husker_games, aes(x = Date, y = Inc, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location)
ggplot(Husker_games, aes(x = Date, y = T_C, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location)
ggplot(Husker_games, aes(x = Date, y = T_S, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location)
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents")
# SCATTERPLOT: Compares Win/Loss over time for each variable, faceted by Home/Away; for the most part Win/Losslines cross or converge, indicating not much effect there, but Home is generally higher than Away
ggplot(Husker_games, aes(x = Date, y = A_C, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location) + labs(title = "Arrests and Citations Over Time", x = "Year", y = "Number of Incidents")
ggplot(Husker_games, aes(x = Date, y = Inc, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location) + labs(title = "Incident Reports Over Time", x = "Year", y = "Number of Incidents")
ggplot(Husker_games, aes(x = Date, y = T_C, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location) + labs(title = "Traffic Crashes Over Time", x = "Year", y = "Number of Incidents")
ggplot(Husker_games, aes(x = Date, y = T_S, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location) + labs(title = "Traffic Stops Over Time", x = "Year", y = "Number of Incidents")
# BOXPLOTS: for all variables, colored by Win or Location
ggplot(H_G.long, aes(variable, value, color = Win)) + geom_boxplot()
ggplot(H_G.long, aes(variable, value, color = Location)) + geom_boxplot()
# BOXPLOT: for each location, colored by Win, faceted by variable (may not need previous two)
ggplot(H_G.long, aes(x = Location, color = Win)) + geom_boxplot(aes(y = value)) + facet_grid(~ variable)
# BOXPLOTS: Home only, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot(data = subset(Husker_games, Location=="Home")) + geom_point(data = subset(Husker_games, Location=="Home")) + theme(axis.text.x = element_text(angle = 90))
# BOXPLOT: shows Total Incidents, Home and Away, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90), legend.text = element_text(size = 8)) + facet_wrap(~ Location) #+ theme(legend.position = "bottom")
# BOXPLOT: shows Total Incidents, Home and Away, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90), legend.text = element_text(size = 8)) + facet_wrap(~ Location) + theme(legend.position = "bottom")
# BOXPLOT: shows Total Incidents, Home and Away, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90), legend.text = element_text(size = 8)) + facet_wrap(~ Location)
# BOXPLOT: shows Total Incidents, Home and Away, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 8)) + facet_wrap(~ Location)
# BOXPLOTS: Home only, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot(data = subset(Husker_games, Location=="Home")) + geom_point(data = subset(Husker_games, Location=="Home")) + theme(axis.text.x = element_text(angle = 90, size = 6)), legend.text = element_text(size = 8))
# BOXPLOTS: Home only, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot(data = subset(Husker_games, Location=="Home")) + geom_point(data = subset(Husker_games, Location=="Home")) + theme(axis.text.x = element_text(angle = 90, size = 6)) + legend.text = element_text(size = 8))
# BOXPLOTS: Home only, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 8))
# BOXPLOTS: Home only, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot(data = subset(Husker_games, Location=="Home")) + geom_point(data = subset(Husker_games, Location=="Home")) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 8))
# BOXPLOTS: Home only, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot(data = subset(Husker_games, Location=="Home")) + geom_point(data = subset(Husker_games, Location=="Home")) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 6))
# BOXPLOTS: Home only, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot(data = subset(Husker_games, Location=="Home")) + geom_point(data = subset(Husker_games, Location=="Home")) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7))
# BOXPLOT: shows Total Incidents, Home and Away, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7)) + facet_wrap(~ Location)
# BOXPLOTS: Colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7))
# BOXPLOTS: for all variables, colored by Win or Location
ggplot(H_G.long, aes(variable, value, color = Win)) + geom_boxplot()
ggplot(H_G.long, aes(variable, value, color = Location)) + geom_boxplot()
# BOXPLOT: for each location, colored by Win, faceted by variable (may not need previous two)
ggplot(H_G.long, aes(x = Location, color = Win)) + geom_boxplot(aes(y = value)) + facet_grid(~ variable)
# BOXPLOTS: Colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7))
# BOXPLOT: shows Total Incidents, Home and Away, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7)) + facet_wrap(~ Location)
# BOXPLOT: for each location, colored by Win, faceted by variable (may not need previous two)
ggplot(H_G.long, aes(x = Location, color = Win)) + geom_boxplot(aes(y = value)) + facet_grid(~ variable) + labs(title = "Public Safety Incidents by Type, Location, and Outcome", x = element_blank(), y = "Number of Incidents")
# BOXPLOTS: for all variables, colored by Win or Location
ggplot(H_G.long, aes(variable, value, color = Win)) + geom_boxplot() + labs(title = "Public Safety Incidents by Type and Outcome", x = "Incident Type", y = "Number of Incidents")
ggplot(H_G.long, aes(variable, value, color = Location)) + geom_boxplot() + labs(title = "Public Safety Incidents by Type and Location", x = "Incident Type", y = "Number of Incidents")
# BOXPLOT: for each location, colored by Win, faceted by variable (may not need previous two)
ggplot(H_G.long, aes(x = Location, color = Win)) + geom_boxplot(aes(y = value)) + facet_grid(~ variable) + labs(title = "Public Safety Incidents by Type, Location, and Outcome", x = element_blank(), y = "Number of Incidents")
# BOXPLOTS: Colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7))
# BOXPLOT: shows Total Incidents, Home and Away, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7)) + facet_wrap(~ Location)
# BOXPLOTS: Colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7)) + labs(title = "Public Safety Incidents by Opponent", x = "Opponent", y = "Total Public Safety Incidents")
# BOXPLOT: shows Total Incidents, Home and Away, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7)) + facet_wrap(~ Location) + labs(title = "Public Safety Incidents by Opponent and Location", x = "Opponent", y = "Total Public Safety Incidents")
# BOXPLOTS: for all variables, colored by Win or Location
ggplot(H_G.long, aes(variable, value, color = Win)) + geom_boxplot() + labs(title = "Public Safety Incidents by Type and Outcome", x = "Incident Type", y = "Number of Incidents")
ggplot(H_G.long, aes(variable, value, color = Location)) + geom_boxplot() + labs(title = "Public Safety Incidents by Type and Location", x = "Incident Type", y = "Number of Incidents")
# BOXPLOT: for each location, colored by Win, faceted by variable (may not need previous two)
ggplot(H_G.long, aes(x = Location, color = Win)) + geom_boxplot(aes(y = value)) + facet_grid(~ variable) + labs(title = "Public Safety Incidents by Type, Location, and Outcome", x = element_blank(), y = "Number of Incidents")
# BOXPLOTS: Colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7)) + labs(title = "Public Safety Incidents by Opponent", x = "Opponent", y = "Total Public Safety Incidents")
# BOXPLOT: shows Total Incidents, Home and Away, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7)) + facet_wrap(~ Location) + labs(title = "Public Safety Incidents by Opponent and Location", x = "Opponent", y = "Total Public Safety Incidents")
# BOXPLOTS: Colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point() + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7)) + labs(title = "Public Safety Incidents by Opponent", x = "Opponent", y = "Total Public Safety Incidents")
# BOXPLOTS: for all variables, colored by Win or Location
ggplot(H_G.long, aes(variable, value, color = Win)) + geom_boxplot() + labs(title = "Public Safety Incidents by Type and Outcome", x = "Incident Type", y = "Number of Incidents")
ggplot(H_G.long, aes(variable, value, color = Location)) + geom_boxplot() + labs(title = "Public Safety Incidents by Type and Location", x = "Incident Type", y = "Number of Incidents")
# BOXPLOT: for each location, colored by Win, faceted by variable (may not need previous two)
ggplot(H_G.long, aes(x = Location, color = Win)) + geom_boxplot(aes(y = value)) + facet_grid(~ variable) + labs(title = "Public Safety Incidents by Type, Location, and Outcome", x = element_blank(), y = "Number of Incidents")
# BOXPLOTS: Colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point() + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7)) + labs(title = "Public Safety Incidents by Opponent", x = "Opponent", y = "Total Public Safety Incidents")
# BOXPLOT: shows Total Incidents, Home and Away, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7)) + facet_wrap(~ Location) + labs(title = "Public Safety Incidents by Opponent and Location", x = "Opponent", y = "Total Public Safety Incidents")
# BOXPLOT: shows Total Incidents, Home and Away, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7)) + facet_wrap(~ Location) + labs(title = "Public Safety Incidents by Opponent and Location", x = "Opponent", y = "Total Public Safety Incidents") + theme(legend.title = element_text(size = 10))
# BOXPLOT: shows Total Incidents, Home and Away, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7)) + facet_wrap(~ Location) + labs(title = "Public Safety Incidents by Opponent and Location", x = "Opponent", y = "Total Public Safety Incidents") + theme(legend.title = element_text(size = 8))
# BOXPLOT: shows Total Incidents, Home and Away, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7)) + facet_wrap(~ Location) + labs(title = "Public Safety Incidents by Opponent and Location", x = "Opponent", y = "Total Public Safety Incidents")
# BOXPLOT: shows Total Incidents, Home and Away, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7)) + facet_wrap(~ Location) + labs(title = "Public Safety Incidents by Opponent and Location", x = "Opponent", y = "Total Public Safety Incidents") + theme(legend.position=c(1, 1))
# BOXPLOT: shows Total Incidents, Home and Away, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7)) + facet_wrap(~ Location) + labs(title = "Public Safety Incidents by Opponent and Location", x = "Opponent", y = "Total Public Safety Incidents")
# BOXPLOTS: for all variables, colored by Win or Location
ggplot(H_G.long, aes(variable, value, color = Win)) + geom_boxplot() + labs(title = "Public Safety Incidents by Type and Outcome", x = "Incident Type", y = "Number of Incidents")
ggplot(H_G.long, aes(variable, value, color = Location)) + geom_boxplot() + labs(title = "Public Safety Incidents by Type and Location", x = "Incident Type", y = "Number of Incidents")
# BOXPLOT: for each location, colored by Win, faceted by variable (may not need previous two)
ggplot(H_G.long, aes(x = Location, color = Win)) + geom_boxplot(aes(y = value)) + facet_grid(~ variable) + labs(title = "Public Safety Incidents by Type, Location, and Outcome", x = element_blank(), y = "Number of Incidents")
# BOXPLOTS: Colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point() + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7)) + labs(title = "Public Safety Incidents by Opponent", x = "Opponent", y = "Total Public Safety Incidents")
# BOXPLOT: shows Total Incidents, Home and Away, colored by Opponent, with points
ggplot(Husker_games, aes(Opponent, Tot_Inc, color = Opponent)) + geom_boxplot() + geom_point(aes(shape = Win)) + theme(axis.text.x = element_text(angle = 90, size = 6), legend.text = element_text(size = 7)) + facet_wrap(~ Location) + labs(title = "Public Safety Incidents by Opponent and Location", x = "Opponent", y = "Total Public Safety Incidents")
# BAR CHART: Comparing variables by w/L & Home/Away; not much difference in Home/Away when losing
ggplot(H_G.long, aes(variable, value, fill = variable)) + geom_bar(stat = "identity") + facet_grid(Location ~ Win)
# BAR CHARTS:
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2)
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ Win)
ggplot(H_G.long, aes(Win, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ variable)
# BAR CHARTS: just for fun, W/L by Location faceted by Opponent
ggplot(Husker_games, aes(Location, fill = Win)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Opponent)
# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C)))
ggplot(Husker_games, aes(Inc)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$Inc),
sd(Husker_games$Inc)))
ggplot(Husker_games, aes(T_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_C),
sd(Husker_games$T_C)))
ggplot(Husker_games, aes(T_S)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_S),
sd(Husker_games$T_S)))
# HISTOGRAMS: colored by variables, faceted by W/L & Home/Away
ggplot (H_G.long, aes(value, fill = variable)) + geom_histogram(position = "dodge") + facet_grid(Location ~ Win)
# BAR CHART: Comparing variables by w/L & Home/Away; not much difference in Home/Away when losing
ggplot(H_G.long, aes(variable, value, fill = variable)) + geom_bar(stat = "identity") + facet_grid(Location ~ Win)
# BAR CHARTS:
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2)
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ Win)
ggplot(H_G.long, aes(Win, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ variable)
# BAR CHARTS: just for fun, W/L by Location faceted by Opponent
ggplot(Husker_games, aes(Location, fill = Win)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Opponent)
# BAR CHART: Comparing variables by w/L & Home/Away; not much difference in Home/Away when losing
ggplot(H_G.long, aes(variable, value, fill = variable)) + geom_bar(stat = "identity") + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents by Variable, Location, and Outcome", x = "Incident Type", y = "Number of Incidents")
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents", legend.title = "Incident Type")
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents", legend(title = "Incident Type"))
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents", legend = "Incident Type")
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents", fill = "Incident Type")
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents") + theme(legend.title = "Incident Type")
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + theme(legend.title = "Incident Type") + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents")
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + theme(legend.title = element_text("Incident Type")) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents")
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents") + guides(fill=guide_legend(title="New Legend Title"))
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents") + scale_fill_discrete(name = "New Legend Title")
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents") + labs(color='NEW LEGEND TITLE')
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents", color = "Incident Type")
# SCATTERPLOT: Shows change over time for variables, faceted by W/L & Home/Away; shows all steady or decreasing over time
ggplot(H_G.long, aes(x = Date, y = value, color = variable)) + geom_point() + geom_smooth(method = lm) + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents Over Time", x = "Year", y = "Number of Incidents", color = "Incident Type")
# SCATTERPLOT: Compares Win/Loss over time for each variable, faceted by Home/Away; for the most part Win/Losslines cross or converge, indicating not much effect there, but Home is generally higher than Away
ggplot(Husker_games, aes(x = Date, y = A_C, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location) + labs(title = "Arrests and Citations Over Time", x = "Year", y = "Number of Incidents")
ggplot(Husker_games, aes(x = Date, y = Inc, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location) + labs(title = "Incident Reports Over Time", x = "Year", y = "Number of Incidents")
ggplot(Husker_games, aes(x = Date, y = T_C, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location) + labs(title = "Traffic Crashes Over Time", x = "Year", y = "Number of Incidents")
ggplot(Husker_games, aes(x = Date, y = T_S, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location) + labs(title = "Traffic Stops Over Time", x = "Year", y = "Number of Incidents")
# BAR CHART: Comparing variables by w/L & Home/Away; not much difference in Home/Away when losing
ggplot(H_G.long, aes(variable, value, fill = variable)) + geom_bar(stat = "identity") + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents by Variable, Location, and Outcome", x = "Incident Type", y = "Number of Incidents", color = "Incident Type")
# BAR CHART: Comparing variables by w/L & Home/Away; not much difference in Home/Away when losing
ggplot(H_G.long, aes(variable, value, fill = variable)) + geom_bar(stat = "identity") + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents by Variable, Location, and Outcome", x = "Incident Type", y = "Number of Incidents", fill = "Incident Type")
# BAR CHART: Comparing variables by w/L & Home/Away; not much difference in Home/Away when losing
ggplot(H_G.long, aes(variable, value, fill = variable)) + geom_bar(stat = "identity") + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents by Variable, Location, and Outcome", x = "Incident Type", y = "Number of Incidents", fill = "Incident Type")
# BAR CHARTS:
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2)
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ Win)
ggplot(H_G.long, aes(Win, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ variable)
# BAR CHARTS: just for fun, W/L by Location faceted by Opponent
ggplot(Husker_games, aes(Location, fill = Win)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Opponent)
# BAR CHART: Comparing variables by w/L & Home/Away; not much difference in Home/Away when losing
ggplot(H_G.long, aes(variable, value, fill = variable)) + geom_bar(stat = "identity") + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents by Variable, Location, and Outcome", x = "Incident Type", y = "Number of Incidents", fill = "Incident Type")
# BAR CHARTS:
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) + labs(title = "Public Safety Incidents by Type and Location", x = "Incident Type", y = "Number of Incidents")
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ Win) + labs(title = "Public Safety Incidents by Type, Location, and Outcome", x = "Incident Type", y = "Number of Incidents")
# BAR CHARTS: just for fun, W/L by Location faceted by Opponent
ggplot(Husker_games, aes(Location, fill = Win)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Opponent)
# BAR CHART: Comparing variables by w/L & Home/Away; not much difference in Home/Away when losing
ggplot(H_G.long, aes(variable, value, fill = variable)) + geom_bar(stat = "identity") + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents by Variable, Location, and Outcome", x = "Incident Type", y = "Number of Incidents", fill = "Incident Type")
# BAR CHARTS:
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) + labs(title = "Public Safety Incidents by Type and Location", x = "Incident Type", y = "Number of Incidents")
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ Win) + labs(title = "Public Safety Incidents by Type, Location, and Outcome", x = "Incident Type", y = "Number of Incidents")
# BAR CHARTS: just for fun, W/L by Location faceted by Opponent
ggplot(Husker_games, aes(Location, fill = Win)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Opponent) + labs(title = "Game Outcome by Opponent and Location", x = "Location", y = "Game Count")
# BAR CHART: Comparing variables by w/L & Home/Away; not much difference in Home/Away when losing
ggplot(H_G.long, aes(variable, value, fill = variable)) + geom_bar(stat = "identity") + facet_grid(Location ~ Win) + labs(title = "Public Safety Incidents by Variable, Location, and Outcome", x = element_blank(), y = "Number of Incidents", fill = "Incident Type")
# BAR CHARTS:
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) + labs(title = "Public Safety Incidents by Type and Location", x = "Incident Type", y = "Number of Incidents")
ggplot(H_G.long, aes(variable, value, fill = Location)) +
stat_summary(fun = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar",
position = position_dodge(width = 0.90), width = 0.2) +
facet_wrap(~ Win) + labs(title = "Public Safety Incidents by Type, Location, and Outcome", x = "Incident Type", y = "Number of Incidents")
# BAR CHARTS: just for fun, W/L by Location faceted by Opponent
ggplot(Husker_games, aes(Location, fill = Win)) + geom_histogram(position = "dodge", stat = "count") + facet_wrap(~ Opponent) + labs(title = "Game Outcome by Opponent and Location", x = "Location", y = "Game Count")
# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C)))
ggplot(Husker_games, aes(Inc)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$Inc),
sd(Husker_games$Inc)))
ggplot(Husker_games, aes(T_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_C),
sd(Husker_games$T_C)))
ggplot(Husker_games, aes(T_S)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_S),
sd(Husker_games$T_S)))
# HISTOGRAMS: colored by variables, faceted by W/L & Home/Away
ggplot (H_G.long, aes(value, fill = variable)) + geom_histogram(position = "dodge") + facet_grid(Location ~ Win)
# HISTOGRAMS: colored by variables, faceted by W/L & Home/Away
ggplot (H_G.long, aes(value, fill = variable)) + geom_histogram(position = "dodge") + facet_grid(Location ~ Win) + labs(title = "Incident Types Histogram by Outcome and Location", x = "Number of Incidents",y = "Count", fill = "Incident Type")
# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C))) + labs(title = "Arrests and Citations Histogram", y = "Density")
ggplot(Husker_games, aes(Inc)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$Inc),
sd(Husker_games$Inc))) + labs(title = "Incident Reports Histogram", y = "Density")
ggplot(Husker_games, aes(T_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_C),
sd(Husker_games$T_C))) + labs(title = "Traffic Crashes Histogram", y = "Density")
ggplot(Husker_games, aes(T_S)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_S),
sd(Husker_games$T_S))) + labs(title = "Traffic Stops Histogram", y = "Density")
# HISTOGRAMS: colored by variables, faceted by W/L & Home/Away
ggplot (H_G.long, aes(value, fill = variable)) + geom_histogram(position = "dodge") + facet_grid(Location ~ Win) + labs(title = "Incident Types Histogram by Outcome and Location", x = "Number of Incidents",y = "Count", fill = "Incident Type")
1 + 3.322log(106192)
1 + 3.322*log(106192)
# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..), bins = 39) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C))) + labs(title = "Arrests and Citations Histogram", y = "Density")
1 + 3.322*log(59798)
ggplot(Husker_games, aes(Inc)) + geom_histogram(aes(y = ..density..), bins = 38) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$Inc),
sd(Husker_games$Inc))) + labs(title = "Incident Reports Histogram", y = "Density")
2*106192^(1/3)
# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..), bins = 95) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C))) + labs(title = "Arrests and Citations Histogram", y = "Density")
# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C))) + labs(title = "Arrests and Citations Histogram", y = "Density")
ggplot(Husker_games, aes(Inc)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$Inc),
sd(Husker_games$Inc))) + labs(title = "Incident Reports Histogram", y = "Density")
ggplot(Husker_games, aes(T_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_C),
sd(Husker_games$T_C))) + labs(title = "Traffic Crashes Histogram", y = "Density")
ggplot(Husker_games, aes(T_S)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_S),
sd(Husker_games$T_S))) + labs(title = "Traffic Stops Histogram", y = "Density")
# HISTOGRAMS: colored by variables, faceted by W/L & Home/Away
ggplot (H_G.long, aes(value, fill = variable)) + geom_histogram(position = "dodge") + facet_grid(Location ~ Win) + labs(title = "Incident Types Histogram by Outcome and Location", x = "Number of Incidents",y = "Count", fill = "Incident Type")
## Check for normal distribution
shapiro.test(Husker_games$A_C) # 0.8052
shapiro.test(Husker_games$Inc) # 0.001708 <- not normal
shapiro.test(Husker_games$T_C) # 0.005984 <- not normal
shapiro.test(Husker_games$T_S) # 0.8249
# Check for normalcy w/ qq plot
qplot(sample = Husker_games$A_C)
qplot(sample = Husker_games$Inc)
qplot(sample = Husker_games$T_C)
qplot(sample = Husker_games$T_S)
## Check for normal distribution
shapiro.test(Husker_games$A_C) # 0.8052
shapiro.test(Husker_games$Inc) # 0.001708 <- not normal
shapiro.test(Husker_games$T_C) # 0.005984 <- not normal
shapiro.test(Husker_games$T_S) # 0.8249
# Check for normalcy w/ qq plot
qplot(sample = Husker_games$A_C) + labs(title = "Q-Q Plot: Arrests and Citations")
qplot(sample = Husker_games$Inc) + labs(title = "Q-Q Plot: Incident Reports")
qplot(sample = Husker_games$T_C) + labs(title = "Q-Q Plot: Traffic Crashes")
qplot(sample = Husker_games$T_S) + labs(title = "Q-Q Plot: Traffic Stops")
# Check (point biserial) correlations
cor.test(H_G.coded$A_C, H_G.coded$Location) # p 0.03558
cor.test(H_G.coded$Inc, H_G.coded$Location) # p 0.5723
cor.test(H_G.coded$T_C, H_G.coded$Location) # p 0.5048
cor.test(H_G.coded$T_S, H_G.coded$Location) # p 0.4838
cor.test(H_G.coded$Tot_Inc, H_G.coded$Location) # p 0.09613
cor.test(H_G.coded$A_C, H_G.coded$Win) # p 0.1085
cor.test(H_G.coded$Inc, H_G.coded$Win) # p 0.3060
cor.test(H_G.coded$T_C, H_G.coded$Win) # p 0.4557
cor.test(H_G.coded$T_S, H_G.coded$Win) # p 0.2604
cor.test(H_G.coded$Tot_Inc, H_G.coded$Win) # p 0.1227
cor(H_G.coded[c("Location", "Win", "A_C", "Inc", "T_C", "T_S", "Tot_Inc")])
cor(H_G.coded[c("Location", "Win", "A_C", "Inc", "T_C", "T_S", "Tot_Inc")])^2 * 100
106192/(sum(106192, 59798, 13395, 74540))*100
# SCATTERPLOTS: time of day vs A_C & T_S (two normal variables), Colored by Win, Faceted by Location
ggplot(Husker_games, aes(Time, A_C, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location)
ggplot(Husker_games, aes(Time, T_S, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location)
# SCATTERPLOTS: time of day vs A_C & T_S (two normal variables), Colored by Win, Faceted by Location
ggplot(Husker_games, aes(Time, A_C, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location) + labs(title = "Arrests and Citations by Game Time, Location and Outcome", x = "Time of Day", y = "No. of Arrests and Citations")
ggplot(Husker_games, aes(Time, T_S, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location) + labs(title = "Traffic Stops by Game Time, Location and Outcome", x = "Time of Day", y = "No. of Traffic Stops")
H_G.lm <- lm(A_C ~ Opponent + Location, data = H_G.coded)
summary(H_G.lm)
round(tapply(H_G.coded$A_C, H_G.coded[c("Opponent", "Location")], mean, na.rm = TRUE), 2)
knit_with_parameters('~/GitHub/DSC520/completed/FinalProject/assignment_10.1_BreitbachScott.Rmd')
demo()
'demo()'
help()
demo()
q()
40**2
# Set Working Directory
setwd("C:/Users/micha/OneDrive/Documents/GitHub/DSC640/Project/")
# Load libraries
library(ggplot2)
library(dplyr)
# Load data
fpbDF <- read.csv("Passenger-Fatalities-per-Billion.csv")
fpbDF
modeDF <- read.csv("modeOfTransport.csv")
modeDF
# Set color palette
colPal = "Dark2"
swBlu = "#2E4BB1"
swRed = "#E61C23"
swYel = "#FDB912"
modeDF %>%
arrange(Fatal_per_Bil_km) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Mode_of_Transport=factor(Mode_of_Transport, levels=Mode_of_Transport)) %>%   # This trick update the factor levels
ggplot(aes(x=Mode_of_Transport, y=Fatal_per_Bil_km)) +
geom_bar(stat = "identity", width = 0.4, fill = swBlu) +
theme(legend.position = "none") +
coord_flip() +
geom_text(aes(label = Fatal_per_Bil_km), hjust = "inward") +
xlab("") + ylab("Fatalities") +
ggtitle("Fatalities per Billion Kilometers Traveled") +
theme_classic()
# Plot data
# Passenger flights with Fatal Accidents each Year
ggplot(accYrDF, aes(x=Year)) +
geom_bar(aes(y=Accidents),
stat = "identity", fill = swBlu, width = barWidth) +
geom_line(aes(y=NumAcc5YrAvg), color = swRed, size = 1) +
ggtitle("Passenger flights with Fatal Accidents each Year") +
ylab("Number of Fatal Accidents") +
theme_classic()
# Load data
accYrDF <- read.csv("ASN_accid_fatal_passenger_yr_filtered.csv")
names(accYrDF)
barWidth = 0.8
colors <- c("NumAcc5YrAvg" = swRed, "AccPrM5YrAvg" = swRed)
# Plot data
# Passenger flights with Fatal Accidents each Year
ggplot(accYrDF, aes(x=Year)) +
geom_bar(aes(y=Accidents),
stat = "identity", fill = swBlu, width = barWidth) +
geom_line(aes(y=NumAcc5YrAvg), color = swRed, size = 1) +
ggtitle("Passenger flights with Fatal Accidents each Year") +
ylab("Number of Fatal Accidents") +
theme_classic()
ggplot(accYrDF, aes(x=Year)) +
geom_bar(aes(y=Fatal.accidents.per.mln.flights),
stat = "identity", fill = swBlu, width = barWidth) +
geom_line(aes(y=AccPrM5YrAvg), color = swRed, size = 1) +
ggtitle("Fatal Accidents per Million Flights each Year") +
ylab("Accidents per MM Flights") +
theme_classic()
