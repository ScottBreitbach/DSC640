# Make some Chernoff faces
faces(bball[,2:16], ncolors = 256)
# Make some Chernoff faces
faces(bball[,2:16], ncolors = 0)
# Put names to faces
faces(bball[,2:16], labels = bball$Name)
# Put names to faces
faces(bball[,2:16], ncolors = 0, labels = bball$Name)
# Put names to faces
faces(bball[,2:16], ncolors = 0, labels = bball$Name)
?faces
faces(bball[,2:16], ncolors = 0, labels = bball$Name, face.type = 2)
faces(bball[,2:16], ncolors = 0, labels = bball$Name, face.type = 1)
faces(bball[,2:16], ncolors = 0, labels = bball$Name, print.info = TRUE)
faces(bball[,2:16], ncolors = 0, labels = bball$Name, cex = 8)
faces(bball[,2:16], ncolors = 0, labels = bball$Name, cex = 0.8)
faces(bball[,2:16], ncolors = 0, labels = bball$Name, cex = 1)
# Load data
crime <-
read.csv('http://datasets.flowingdata.com/crimeRatesByState-formatted.csv')
head(crime)
# Create star charts
star(crime)
# Create star charts
stars(crime)
# Set row names to state names
row.names(crime) <- crime$state
crime <- crime[,2:7]
# Star charts
stars(crime, flip.labels = FALSE, key.loc = c(15, 1.5))
# Create star charts
stars(crime)
# Star charts
stars(crime, flip.labels = FALSE, key.loc = c(15, 1.5))
# Align labels and add a key
stars(crime, flip.labels = FALSE, key.loc = c(15, 1.5))
# Variations
# Resturct all data to the top half of the circle
stars(crime, flip.labels = FALSE, key.loc = c(15, 1.5), full = FALSE)
# Nightingale charts
stars(crime, flip.labels = FALSE, key.loc = c(15, 1.5), draw.segments = FALSE)
# Nightingale charts
stars(crime, flip.labels = FALSE, key.loc = c(15, 1.5), draw.segments = TRUE)
# Load data
url <- "http://datasets.flowingdata.com/education.csv"
education <- read.csv(url, header = TRUE)
education[1:10,]
# Load library
library(lattice)
# Create parallel coordinates plot
parallel(education)
# Create parallel coordinates plot
parallelplot(education)
# Flip on axis
parallelplot(education, horizontal.axis=FALSE)
# Remove state column & change colors to black
parallelplot(education[,2:7], horizontal.axis=FALSE, col = '#000000')
summary(education)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#cccccc'
}
reading_colors <- c(reading_colors, col)
}
head(education)
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#737373'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#525252'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#525252'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#737373'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#969696'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#bdbdbd'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#cccccc'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#bdbdbd'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#bdbdbd'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#767676'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#bdbdbd'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
for (i in 1:length(education$state)) {
if(education$dropout_rate[i] > 5.3) {
col <- '#000000'
} else {
col <- '#bdbdbd'
}
dropout_colors <- c(dropout_colors, col)
}
# set colors based on dropout rates
dropout_colors <- c()
for (i in 1:length(education$state)) {
if(education$dropout_rate[i] > 5.3) {
col <- '#000000'
} else {
col <- '#bdbdbd'
}
dropout_colors <- c(dropout_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = dropout_colors)
# Load data
url <- "http://datasets.flowingdata.com/education.csv"
education <- read.csv(url, header = TRUE)
# Figure out how far each state should be from each other
ed.dis <- dist(education[,2:7])
ed.dis
# get x-y coordinates for each state
ed.mds <- cmdscale(ed.dis)
ed.mds
# store these values in x and y variables
x <- ed.mds[,1]
y <- ed.mds[,2]
plot(x, y)
# add labels
plot(x, y, type='n')
text(x, y, labels = education$state)
plot(x, y, type='n')
text(x, y, labels = education$state, col = reading_colors)
plot(x, y, type='n')
text(x, y, labels = education$state, col = dropout_colors)
## Model-based clustering
library(mclust)
ed.mclust <- Mclust(ed.mds)
# plot
plot(ed.mclust, data = ed.mds)
# plot
plot(ed.mclust, data = ed.mds)
# plot
plot(ed.mclust, data = ed.mds)
# plot
plot(ed.mclust, data = ed.mds)
# get x-y coordinates for each state
ed.mds <- cmdscale(ed.dis)
# fit
ed.mclust <- Mclust(ed.mds)
# plot
plot(ed.mclust, data = ed.mds)
# fit
ed.mclust <- Mclust(ed.mds)
# plot
plot(ed.mclust, data = ed.mds)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# Set Working Directory
setwd("C:/Users/micha/OneDrive/Documents/GitHub/DSC640/Weeks9-10/")
# Load libraries
library(ggplot2)
# Load the data
costcos <- read.csv("costcos-geocoded.csv", header = TRUE)
ballers <- read.csv("ppg2008.csv", header = TRUE, row.names = 1)
# Store data as a matrix for heatmap
baller_matrix <- data.matrix(ballers)
# Make a heat map
bball_heatmap <- heatmap(baller_matrix, Rowv = NA, Colv = NA,
col = heat.colors(256),  # sets colors to red / yellow
scale = 'column', margins = c(5,10))
# Make the map
map(database = 'state',
col = '#E31837')    # Costco red
# Set Working Directory
setwd("C:/Users/micha/OneDrive/Documents/GitHub/DSC640/Weeks9-10/")
# Load libraries
library(ggplot2)
# Load data
costcos <- read.csv("costcos-geocoded.csv", header = TRUE)
ballers <- read.csv("ppg2008.csv", header = TRUE, row.names = 1)
head(costcos)
head(ballers)
## HEAT MAP
# Store data as a matrix for heatmap
baller_matrix <- data.matrix(ballers)
# Pick a different color scheme
bball_heatmap <- heatmap(baller_matrix, Rowv = NA, Colv = NA,
col = heat.colors(256),  # sets colors to red / yellow
scale = 'column', margins = c(5,10))
## SPATIAL CHART
# Make the map
map(database = 'state',
col = '#E31837')    # costco red
# Add the Costcos
symbols(costcos$Longitude, costcos$Latitude,
bg = '#005DAA', # costco blue
fg = '#ffffff', # white
lwd = 0.1,
circles = rep(1, length(costcos$Longitude)),
inches = 0.05,  # size of circles
add = TRUE)     # add each to map instead of crating new plot
library(maps)
# Make the map
map(database = 'state',
col = '#E31837')    # costco red
# Add the Costcos
symbols(costcos$Longitude, costcos$Latitude,
bg = '#005DAA', # costco blue
fg = '#ffffff', # white
lwd = 0.1,
circles = rep(1, length(costcos$Longitude)),
inches = 0.05,  # size of circles
add = TRUE)     # add each to map instead of crating new plot
# Make the map
map(database = 'state',
col = '#E31837')    # costco red
# Add the Costcos
symbols(costcos$Longitude, costcos$Latitude,
bg = '#005DAA', # costco blue
# fg = '#ffffff', # white
lwd = 0.1,
circles = rep(1, length(costcos$Longitude)),
inches = 0.05,  # size of circles
add = TRUE)     # add each to map instead of crating new plot
heatmap(baller_matrix, Rowv = NA, Colv = NA,
col = heat.colors(256),  # sets colors to red / yellow
scale = 'column', margins = c(5,10)) +
ggtitle("Murders vs Burglaries in the United States")
heatmap(baller_matrix, Rowv = NA, Colv = NA,
col = heat.colors(256),  # sets colors to red / yellow
scale = 'column', margins = c(5,10),
main = "NBA Per Game Performance")
heatmap(baller_matrix, Rowv = NA, Colv = NA,
col = heat.colors(256),  # sets colors to red / yellow
scale = 'column', margins = c(5,10),
main = "NBA Per Game Performance", scale = 5)
heatmap(baller_matrix, Rowv = NA, Colv = NA,
col = heat.colors(256),  # sets colors to red / yellow
scale = 'column', margins = c(5,10),
main = "NBA Per Game Performance")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# Set Working Directory
setwd("C:/Users/micha/OneDrive/Documents/GitHub/DSC640/Weeks9-10/")
# Load libraries
library(ggplot2)
library(maps)
# Store data as a matrix for heatmap
baller_matrix <- data.matrix(ballers)
# Make a heat map
heatmap(baller_matrix, Rowv = NA, Colv = NA,
col = heat.colors(256),  # sets colors to red / yellow
scale = 'column', margins = c(5,10),
main = "NBA Per Game Performance")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# Set Working Directory
setwd("C:/Users/micha/OneDrive/Documents/GitHub/DSC640/Weeks9-10/")
# Load libraries
library(ggplot2)
library(maps)
# Make the map
map(database = 'state',
col = '#E31837')    # Costco red
# Add the Costcos
symbols(costcos$Longitude, costcos$Latitude,
bg = '#005DAA', # Costco blue
fg = '#ffffff', # white
lwd = 0.1,
circles = rep(1, length(costcos$Longitude)),
inches = 0.05,  # size of circles
add = TRUE)     # add each to map instead of crating new plot
# Make the map
map(database = 'state',
col = '#E31837')    # Costco red
# Add the Costcos
symbols(costcos$Longitude, costcos$Latitude,
bg = '#005DAA', # Costco blue
fg = '#ffffff', # white
lwd = 0.1,
circles = rep(1, length(costcos$Longitude)),
inches = 0.05,  # size of circles
add = TRUE,     # add each to map instead of crating new plot
main = "US Costco Locations")
# Make the map
map(database = 'state',
col = '#E31837')    # Costco red
# Add the Costcos
symbols(costcos$Longitude, costcos$Latitude,
bg = '#005DAA', # Costco blue
fg = '#ffffff', # white
lwd = 0.1,
circles = rep(1, length(costcos$Longitude)),
inches = 0.05,  # size of circles
add = TRUE,     # add each to map instead of crating new plot
main = "US Costco Locations")
title("Test")
# Make the map
map(database = 'state',
col = '#E31837')    # Costco red
# Add the Costcos
symbols(costcos$Longitude, costcos$Latitude,
bg = '#005DAA', # Costco blue
fg = '#ffffff', # white
lwd = 0.1,
circles = rep(1, length(costcos$Longitude)),
inches = 0.05,  # size of circles
add = TRUE)     # add each to map instead of crating new plot
# Add title
title("US Costco Locations")
# Make the map
map(database = 'state',
col = '#E31837')    # Costco red
# Add the Costcos
symbols(costcos$Longitude, costcos$Latitude,
bg = '#005DAA', # Costco blue
fg = '#ffffff', # white
lwd = 0.1,
circles = rep(1, length(costcos$Longitude)),
inches = 0.05,  # size of circles
add = TRUE)     # add each to map instead of crating new plot
# Add title
title("US Costco Locations", adj = 0)
ggplot(ballers, aes(x=PTS, y=FGP)) +
stat_density_2d(aes(fill = ..level..), geom = 'polygon') +
scale_fill_distiller(palette= "YlOrRd", direction=1) +
theme(legend.position = 'none')
ggplot(ballers, aes(x=FGP, y=PTS)) +
stat_density_2d(aes(fill = ..level..), geom = 'polygon') +
scale_fill_distiller(palette= "YlOrRd", direction=1) +
theme(legend.position = 'none')
# area + contour
ggplot(costcos, aes(x=Longitude, y=Latitude)) +
stat_density2d(aes(fill = ..level..), geom = 'polygon', color='white') +
theme(legend.position = 'none')
# Plot area + contour
ggplot(costcos, aes(x=Longitude, y=Latitude)) +
stat_density2d(aes(fill = ..level..), geom = 'polygon', color='white') +
theme(legend.position = 'none') +
ggtitle("Contour Plot of Costco Locations by Lat/Lon")
# Plot area + contour
ggplot(costcos, aes(x=Longitude, y=Latitude)) +
stat_density2d(aes(fill = ..level..), geom = 'polygon', color='white') +
theme(legend.position = 'none') +
ggtitle("Contour Plot of Costco Locations by Lat/Lon")
# Plot area + contour
ggplot(costcos, aes(x=Longitude, y=Latitude)) +
stat_density2d(aes(fill = ..level..), geom = 'polygon', color='white') +
theme(legend.position = 'none') +
xlim(-170, -60)
ggtitle("Contour Plot of Costco Locations by Lat/Lon")
# Plot area + contour
ggplot(costcos, aes(x=Longitude, y=Latitude)) +
stat_density2d(aes(fill = ..level..), geom = 'polygon', color='white') +
theme(legend.position = 'none') +
xlim(-170, -60) +
ggtitle("Contour Plot of Costco Locations by Lat/Lon")
# Plot area + contour
ggplot(costcos, aes(x=Longitude, y=Latitude)) +
stat_density2d(aes(fill = ..level..), geom = 'polygon', color='white') +
theme(legend.position = 'none') +
xlim(-170, -60) +
ggtitle("Contour Plot of Costco Locations by Lat/Lon Coordinates")
# Plot area + contour
ggplot(costcos, aes(x=Longitude, y=Latitude)) +
stat_density2d(aes(fill = ..level..), geom = 'polygon', color='white') +
theme(legend.position = 'none') +
xlim(-160, -60) +
ggtitle("Contour Plot of Costco Locations by Lat/Lon Coordinates")
# Plot area + contour
ggplot(costcos, aes(x=Longitude, y=Latitude)) +
stat_density2d(aes(fill = ..level..), geom = 'polygon', color='white') +
theme(legend.position = 'none') +
xlim(-165, -60) +
ggtitle("Contour Plot of Costco Locations by Lat/Lon Coordinates")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# Set Working Directory
setwd("C:/Users/micha/OneDrive/Documents/GitHub/DSC640/Weeks9-10/")
# Load libraries
library(ggplot2)
library(maps)
# Load the data
costcos <- read.csv("costcos-geocoded.csv", header = TRUE)
ballers <- read.csv("ppg2008.csv", header = TRUE, row.names = 1)
# Store data as a matrix for heatmap
baller_matrix <- data.matrix(ballers)
# Make a heat map
heatmap(baller_matrix, Rowv = NA, Colv = NA,
col = heat.colors(256),  # sets colors to red / yellow
scale = 'column', margins = c(5,10),
main = "NBA Per Game Performance")
# Make the map
map(database = 'state',
col = '#E31837')    # Costco red
# Add the Costcos
symbols(costcos$Longitude, costcos$Latitude,
bg = '#005DAA', # Costco blue
fg = '#ffffff', # white
lwd = 0.1,
circles = rep(1, length(costcos$Longitude)),
inches = 0.05,  # size of circles
add = TRUE)     # add each to map instead of crating new plot
# Add title
title("US Costco Locations (Lower 48)", adj = 0)
# Plot area + contour
ggplot(costcos, aes(x=Longitude, y=Latitude)) +
stat_density2d(aes(fill = ..level..), geom = 'polygon', color='white') +
theme(legend.position = 'none') +
xlim(-165, -60) +
ggtitle("Contour Plot of Costco Locations by Lat/Lon Coordinates")
