ggplot(Husker_games, aes(T_S)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_S),
sd(Husker_games$T_S)))
# HISTOGRAMS: colored by variables, faceted by W/L & Home/Away
ggplot (H_G.long, aes(value, fill = variable)) + geom_histogram(position = "dodge") + facet_grid(Location ~ Win)
# HISTOGRAMS: colored by variables, faceted by W/L & Home/Away
ggplot (H_G.long, aes(value, fill = variable)) + geom_histogram(position = "dodge") + facet_grid(Location ~ Win) + labs(title = "Incident Types Histogram by Outcome and Location", x = "Number of Incidents",y = "Count", fill = "Incident Type")
# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C))) + labs(title = "Arrests and Citations Histogram", y = "Density")
ggplot(Husker_games, aes(Inc)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$Inc),
sd(Husker_games$Inc))) + labs(title = "Incident Reports Histogram", y = "Density")
ggplot(Husker_games, aes(T_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_C),
sd(Husker_games$T_C))) + labs(title = "Traffic Crashes Histogram", y = "Density")
ggplot(Husker_games, aes(T_S)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_S),
sd(Husker_games$T_S))) + labs(title = "Traffic Stops Histogram", y = "Density")
# HISTOGRAMS: colored by variables, faceted by W/L & Home/Away
ggplot (H_G.long, aes(value, fill = variable)) + geom_histogram(position = "dodge") + facet_grid(Location ~ Win) + labs(title = "Incident Types Histogram by Outcome and Location", x = "Number of Incidents",y = "Count", fill = "Incident Type")
1 + 3.322log(106192)
1 + 3.322*log(106192)
# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..), bins = 39) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C))) + labs(title = "Arrests and Citations Histogram", y = "Density")
1 + 3.322*log(59798)
ggplot(Husker_games, aes(Inc)) + geom_histogram(aes(y = ..density..), bins = 38) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$Inc),
sd(Husker_games$Inc))) + labs(title = "Incident Reports Histogram", y = "Density")
2*106192^(1/3)
# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..), bins = 95) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C))) + labs(title = "Arrests and Citations Histogram", y = "Density")
# HISTOGRAMS: for each variable, with normality curve
ggplot(Husker_games, aes(A_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$A_C),
sd(Husker_games$A_C))) + labs(title = "Arrests and Citations Histogram", y = "Density")
ggplot(Husker_games, aes(Inc)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$Inc),
sd(Husker_games$Inc))) + labs(title = "Incident Reports Histogram", y = "Density")
ggplot(Husker_games, aes(T_C)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_C),
sd(Husker_games$T_C))) + labs(title = "Traffic Crashes Histogram", y = "Density")
ggplot(Husker_games, aes(T_S)) + geom_histogram(aes(y = ..density..)) +
stat_function(fun = dnorm, args = list(mean = mean(Husker_games$T_S),
sd(Husker_games$T_S))) + labs(title = "Traffic Stops Histogram", y = "Density")
# HISTOGRAMS: colored by variables, faceted by W/L & Home/Away
ggplot (H_G.long, aes(value, fill = variable)) + geom_histogram(position = "dodge") + facet_grid(Location ~ Win) + labs(title = "Incident Types Histogram by Outcome and Location", x = "Number of Incidents",y = "Count", fill = "Incident Type")
## Check for normal distribution
shapiro.test(Husker_games$A_C) # 0.8052
shapiro.test(Husker_games$Inc) # 0.001708 <- not normal
shapiro.test(Husker_games$T_C) # 0.005984 <- not normal
shapiro.test(Husker_games$T_S) # 0.8249
# Check for normalcy w/ qq plot
qplot(sample = Husker_games$A_C)
qplot(sample = Husker_games$Inc)
qplot(sample = Husker_games$T_C)
qplot(sample = Husker_games$T_S)
## Check for normal distribution
shapiro.test(Husker_games$A_C) # 0.8052
shapiro.test(Husker_games$Inc) # 0.001708 <- not normal
shapiro.test(Husker_games$T_C) # 0.005984 <- not normal
shapiro.test(Husker_games$T_S) # 0.8249
# Check for normalcy w/ qq plot
qplot(sample = Husker_games$A_C) + labs(title = "Q-Q Plot: Arrests and Citations")
qplot(sample = Husker_games$Inc) + labs(title = "Q-Q Plot: Incident Reports")
qplot(sample = Husker_games$T_C) + labs(title = "Q-Q Plot: Traffic Crashes")
qplot(sample = Husker_games$T_S) + labs(title = "Q-Q Plot: Traffic Stops")
# Check (point biserial) correlations
cor.test(H_G.coded$A_C, H_G.coded$Location) # p 0.03558
cor.test(H_G.coded$Inc, H_G.coded$Location) # p 0.5723
cor.test(H_G.coded$T_C, H_G.coded$Location) # p 0.5048
cor.test(H_G.coded$T_S, H_G.coded$Location) # p 0.4838
cor.test(H_G.coded$Tot_Inc, H_G.coded$Location) # p 0.09613
cor.test(H_G.coded$A_C, H_G.coded$Win) # p 0.1085
cor.test(H_G.coded$Inc, H_G.coded$Win) # p 0.3060
cor.test(H_G.coded$T_C, H_G.coded$Win) # p 0.4557
cor.test(H_G.coded$T_S, H_G.coded$Win) # p 0.2604
cor.test(H_G.coded$Tot_Inc, H_G.coded$Win) # p 0.1227
cor(H_G.coded[c("Location", "Win", "A_C", "Inc", "T_C", "T_S", "Tot_Inc")])
cor(H_G.coded[c("Location", "Win", "A_C", "Inc", "T_C", "T_S", "Tot_Inc")])^2 * 100
106192/(sum(106192, 59798, 13395, 74540))*100
# SCATTERPLOTS: time of day vs A_C & T_S (two normal variables), Colored by Win, Faceted by Location
ggplot(Husker_games, aes(Time, A_C, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location)
ggplot(Husker_games, aes(Time, T_S, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location)
# SCATTERPLOTS: time of day vs A_C & T_S (two normal variables), Colored by Win, Faceted by Location
ggplot(Husker_games, aes(Time, A_C, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location) + labs(title = "Arrests and Citations by Game Time, Location and Outcome", x = "Time of Day", y = "No. of Arrests and Citations")
ggplot(Husker_games, aes(Time, T_S, color = Win)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~ Location) + labs(title = "Traffic Stops by Game Time, Location and Outcome", x = "Time of Day", y = "No. of Traffic Stops")
H_G.lm <- lm(A_C ~ Opponent + Location, data = H_G.coded)
summary(H_G.lm)
round(tapply(H_G.coded$A_C, H_G.coded[c("Opponent", "Location")], mean, na.rm = TRUE), 2)
knit_with_parameters('~/GitHub/DSC520/completed/FinalProject/assignment_10.1_BreitbachScott.Rmd')
demo()
'demo()'
help()
demo()
q()
40**2
# Load data
bball <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", header = TRUE)
head(bball)
bball[1:5,]
# Sort by field goal percentage
bball_by_fgp <- bball[order(bball$FGP, decreasing = TRUE)]
# Sort by field goal percentage
bball_by_fgp <- bball[order(bball$FGP, decreasing = TRUE),]
head(bball_by_fgp)
# Reverse order on points per game
bbal <- bball[order(bball$PTS, decreasing = FALSE),]
# Reverse order on points per game
bball <- bball[order(bball$PTS, decreasing = FALSE),]
del(bbal)
r(bbal)
remove(bbal)
bbal
head(bball)
row.names(bball)
# set row names to player name
row.names(bball) <- bball$Name
row.names(bball)
head(bball)
bball <- bball[,2:20]
head(bball)
# Store data as a matrix for heatmap
bball_matrix <- data.matrix(bball)
head(bball_matrix)
# Make a heatmap
bball_heatmap <- heatmap(bball_matrix, Rowv = NA, Colv = NA,
col = cm.colors(256), scale = 'column',
margins = c(5,10))
# Pick a different color scheme
bball_heatmap <- heatmap(bball_matrix, Rowv = NA, Colv = NA,
col = heat.colors(256),  # sets colors to red / yellow
scale = 'column', margins = c(5,10))
cm.colors(10)
# Set your own color scheme
red_colors <- c('#ffd3cd', '#ffc4bc', '#ffb5ab', '#ffa69a', '#ff9789',
'#ff8978', '#ff7a67', '#ff6b56', '#ff5c45', '#ff4d34')
bball_heatmap <- heatmap(bball_matrix, Rowv = NA, Colv = NA,
col = red_colors,  # sets colors to assigned colors
scale = 'column', margins = c(5,10))
# Set your own color scheme
red_colors <- c('#ffd3cd', '#ffc4bc', '#ffb5ab', '#ffa69a', '#ff9789',
'#ff8978', '#ff7a67', '2E4BB1', '#ff6b56', '#ff5c45', '#ff4d34')
bball_heatmap <- heatmap(bball_matrix, Rowv = NA, Colv = NA,
col = red_colors,  # sets colors to assigned colors
scale = 'column', margins = c(5,10))
# Set your own color scheme
red_colors <- c('#ffd3cd', '#ffc4bc', '#ffb5ab', '#ffa69a', '#ff9789',
'#ff8978', '#ff7a67', '#2E4BB1', '#ff6b56', '#ff5c45', '#ff4d34')
bball_heatmap <- heatmap(bball_matrix, Rowv = NA, Colv = NA,
col = red_colors,  # sets colors to assigned colors
scale = 'column', margins = c(5,10))
# Set your own color scheme
red_colors <- c('#ffd3cd', '#ffc4bc', '#ffb5ab', '#ffa69a', '#ff9789',
'#ff8978', '#ff7a67', '#ff6b56', '#ff5c45', '#ff4d34')
bball_heatmap <- heatmap(bball_matrix, Rowv = NA, Colv = NA,
col = red_colors,  # sets colors to assigned colors
scale = 'column', margins = c(5,10))
?cm.colors
bball_heatmap <- heatmap(bball_matrix, Rowv = NA, Colv = NA,
col = rainbow,  # sets colors to assigned colors
scale = 'column', margins = c(5,10))
red_colors
# Set your own color scheme
red_colors <- c('#ffd3cd', '#ffc4bc', '#ffb5ab', '#ffa69a', '#ff9789',
'#ff8978', '#ff7a67', '#ff6b56', '#ff5c45', '#ff4d34')
bball_heatmap <- heatmap(bball_matrix, Rowv = NA, Colv = NA,
col = red_colors,  # sets colors to assigned colors
scale = 'column', margins = c(5,10))
?brewer.pal
??brewer.pal
library(RColorBrewer)
?brewer.pal
# Create a heatmap using ColorBrewer
bball_heatmap <- heatmap(bball_matrix, Rowv = NA, Colv = NA,
col = brewer.pal(9, "Blues"),  # 9 shades of blue
scale = 'column', margins = c(5,10))
# Load library
library(aplpack)
# Load library
install.packages('aplpack')
library(aplpack)
# Load data set
bball <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", header = TRUE)
# Make some Chernoff faces
faces(bball[,2:16], ncolors = 0)
# Make some Chernoff faces
faces(bball[,2:16], ncolors = 5)
# Make some Chernoff faces
faces(bball[,2:16], ncolors = 100)
# Make some Chernoff faces
faces(bball[,2:16], ncolors = 256)
# Make some Chernoff faces
faces(bball[,2:16], ncolors = 0)
# Put names to faces
faces(bball[,2:16], labels = bball$Name)
# Put names to faces
faces(bball[,2:16], ncolors = 0, labels = bball$Name)
# Put names to faces
faces(bball[,2:16], ncolors = 0, labels = bball$Name)
?faces
faces(bball[,2:16], ncolors = 0, labels = bball$Name, face.type = 2)
faces(bball[,2:16], ncolors = 0, labels = bball$Name, face.type = 1)
faces(bball[,2:16], ncolors = 0, labels = bball$Name, print.info = TRUE)
faces(bball[,2:16], ncolors = 0, labels = bball$Name, cex = 8)
faces(bball[,2:16], ncolors = 0, labels = bball$Name, cex = 0.8)
faces(bball[,2:16], ncolors = 0, labels = bball$Name, cex = 1)
# Load data
crime <-
read.csv('http://datasets.flowingdata.com/crimeRatesByState-formatted.csv')
head(crime)
# Create star charts
star(crime)
# Create star charts
stars(crime)
# Set row names to state names
row.names(crime) <- crime$state
crime <- crime[,2:7]
# Star charts
stars(crime, flip.labels = FALSE, key.loc = c(15, 1.5))
# Create star charts
stars(crime)
# Star charts
stars(crime, flip.labels = FALSE, key.loc = c(15, 1.5))
# Align labels and add a key
stars(crime, flip.labels = FALSE, key.loc = c(15, 1.5))
# Variations
# Resturct all data to the top half of the circle
stars(crime, flip.labels = FALSE, key.loc = c(15, 1.5), full = FALSE)
# Nightingale charts
stars(crime, flip.labels = FALSE, key.loc = c(15, 1.5), draw.segments = FALSE)
# Nightingale charts
stars(crime, flip.labels = FALSE, key.loc = c(15, 1.5), draw.segments = TRUE)
# Load data
url <- "http://datasets.flowingdata.com/education.csv"
education <- read.csv(url, header = TRUE)
education[1:10,]
# Load library
library(lattice)
# Create parallel coordinates plot
parallel(education)
# Create parallel coordinates plot
parallelplot(education)
# Flip on axis
parallelplot(education, horizontal.axis=FALSE)
# Remove state column & change colors to black
parallelplot(education[,2:7], horizontal.axis=FALSE, col = '#000000')
summary(education)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#cccccc'
}
reading_colors <- c(reading_colors, col)
}
head(education)
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#737373'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#525252'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#525252'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#737373'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#969696'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#bdbdbd'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#cccccc'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#bdbdbd'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#bdbdbd'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#767676'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
# set colors for each state by greater or less than median reading score
reading_colors <- c()
for (i in 1:length(education$state)) {
if(education$reading[i] >523) {
col <- '#000000'
} else {
col <- '#bdbdbd'
}
reading_colors <- c(reading_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = reading_colors)
for (i in 1:length(education$state)) {
if(education$dropout_rate[i] > 5.3) {
col <- '#000000'
} else {
col <- '#bdbdbd'
}
dropout_colors <- c(dropout_colors, col)
}
# set colors based on dropout rates
dropout_colors <- c()
for (i in 1:length(education$state)) {
if(education$dropout_rate[i] > 5.3) {
col <- '#000000'
} else {
col <- '#bdbdbd'
}
dropout_colors <- c(dropout_colors, col)
}
# Pass the colors in to the parallel function
parallelplot(education[,2:7], horizontal.axis=FALSE, col = dropout_colors)
# Load data
url <- "http://datasets.flowingdata.com/education.csv"
education <- read.csv(url, header = TRUE)
# Figure out how far each state should be from each other
ed.dis <- dist(education[,2:7])
ed.dis
# get x-y coordinates for each state
ed.mds <- cmdscale(ed.dis)
ed.mds
# store these values in x and y variables
x <- ed.mds[,1]
y <- ed.mds[,2]
plot(x, y)
# add labels
plot(x, y, type='n')
text(x, y, labels = education$state)
plot(x, y, type='n')
text(x, y, labels = education$state, col = reading_colors)
plot(x, y, type='n')
text(x, y, labels = education$state, col = dropout_colors)
## Model-based clustering
library(mclust)
ed.mclust <- Mclust(ed.mds)
# plot
plot(ed.mclust, data = ed.mds)
# plot
plot(ed.mclust, data = ed.mds)
# plot
plot(ed.mclust, data = ed.mds)
# plot
plot(ed.mclust, data = ed.mds)
# get x-y coordinates for each state
ed.mds <- cmdscale(ed.dis)
# fit
ed.mclust <- Mclust(ed.mds)
# plot
plot(ed.mclust, data = ed.mds)
# fit
ed.mclust <- Mclust(ed.mds)
# plot
plot(ed.mclust, data = ed.mds)
ggplot(ballers, aes(x=PTS, y=FGP)) +
stat_density_2d(aes(fill = ..level..), geom = 'polygon') +
scale_fill_distiller(palette= "YlOrRd", direction=1) +
theme(legend.position = 'none')
# Set Working Directory
setwd("C:/Users/micha/OneDrive/Documents/GitHub/DSC640/Weeks9-10/")
# Load libraries
library(ggplot2)
# Load data
costcos <- read.csv("costcos-geocoded.csv", header = TRUE)
ballers <- read.csv("ppg2008.csv", header = TRUE, row.names = 1)
head(costcos)
head(ballers)
## HEAT MAP
# Store data as a matrix for heatmap
baller_matrix <- data.matrix(ballers)
# Pick a different color scheme
bball_heatmap <- heatmap(baller_matrix, Rowv = NA, Colv = NA,
col = heat.colors(256),  # sets colors to red / yellow
scale = 'column', margins = c(5,10))
## SPATIAL CHART
# Make the map
map(database = 'state',
col = '#E31837')    # costco red
# Add the Costcos
symbols(costcos$Longitude, costcos$Latitude,
bg = '#005DAA', # costco blue
fg = '#ffffff', # white
lwd = 0.1,
circles = rep(1, length(costcos$Longitude)),
inches = 0.05,  # size of circles
add = TRUE)     # add each to map instead of crating new plot
## CONTOUR PLOT
# show contour only
ggplot(costcos, aes(x=Longitude, y=Latitude)) +
geom_density2d()
# show area only
ggplot(costcos, aes(x=Longitude, y=Latitude)) +
stat_density2d(aes(fill = ..level..), geom = 'polygon') +
theme(legend.position = 'none')
# area + contour
ggplot(costcos, aes(x=Longitude, y=Latitude)) +
stat_density2d(aes(fill = ..level..), geom = 'polygon', color='white') +
theme(legend.position = 'none')
# # using raster
# ggplot(costcos, aes(x=Longitude, y=Latitude)) +
#   stat_density2d(aes(fill = ..density..), geom = 'raster', contour = FALSE) +
#   scale_x_continuous(expand = c(0, 0)) +
#   scale_y_continuous(expand = c(0, 0)) +
#   theme(legend.position = 'none')
ggplot(ballers, aes(x=PTS, y=FGP)) +
stat_density_2d(aes(fill = ..level..), geom = 'polygon') +
scale_fill_distiller(palette= "YlOrRd", direction=1) +
theme(legend.position = 'none')
# well that's weird....
ggplot(ballers, aes(x=PTS, y=FGP)) +
geom_point()
